function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var convert = _interopDefault(require('xml-js'));
var Vex = _interopDefault(require('vexflow'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var styles = {"button":"_bv_7k"};

var Button = function Button(_ref) {
  var children = _ref.children,
      disabled = _ref.disabled,
      className = _ref.className,
      id = _ref.id,
      onClick = _ref.onClick;
  return /*#__PURE__*/React__default.createElement("button", {
    disabled: disabled,
    id: id,
    className: styles.button + " " + className,
    onClick: onClick
  }, children);
};

var styles$1 = {"toggleButton":"_1evAO","checked":"_1kQkK"};

var ToggleButton = function ToggleButton(_ref) {
  var children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      checked = _ref.checked,
      onClick = _ref.onClick,
      disabled = _ref.disabled;

  if (checked) {
    return /*#__PURE__*/React__default.createElement("button", {
      id: id,
      className: styles$1.toggleButton + " " + styles$1.checked + " " + className,
      onClick: onClick
    }, children);
  }

  return /*#__PURE__*/React__default.createElement("button", {
    id: id,
    disabled: disabled,
    className: styles$1.toggleButton + " " + className,
    onClick: onClick
  }, children);
};

var styles$2 = {"buttonGroup":"_1y24Q"};

var ButtonGroup = function ButtonGroup(_ref) {
  var children = _ref.children,
      className = _ref.className;
  return /*#__PURE__*/React__default.createElement("div", {
    className: styles$2.buttonGroup + " " + className
  }, children);
};

var styles$3 = {"navbar":"_3P9CF"};

var Navbar = function Navbar(_ref) {
  var children = _ref.children,
      className = _ref.className;
  return /*#__PURE__*/React__default.createElement("nav", {
    className: styles$3.navbar + " " + className
  }, children);
};

var styles$4 = {"form":"_2yCLu","timeInput":"_26sDs","formcontainer":"_eki4G"};

var Dropdown = function Dropdown(_ref) {
  var children = _ref.children,
      className = _ref.className,
      id = _ref.id,
      onChange = _ref.onChange;
  return /*#__PURE__*/React__default.createElement("form", {
    className: styles$4.form,
    onChange: onChange
  }, /*#__PURE__*/React__default.createElement("select", {
    id: id,
    className: className
  }, children));
};

var ReactDomServer = require('react-dom/server');

var xmlString = function xmlString(measures) {
  return "\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE score-partwise PUBLIC \"-//Recordare//DTD MusicXML 2.0 Partwise//EN\" \"http://www.musicxml.org/dtds/partwise.dtd\">\n\n<score-partwise version=\"2.0\">\n    <movement-title>Test</movement-title>\n    <identification>\n        <encoding>\n            <software>Caesura</software>\n            <encoding-date>2020-10-10</encoding-date>\n            <supports attribute=\"new-system\" element=\"print\" type=\"yes\" value=\"yes\"/>\n            <supports attribute=\"new-page\" element=\"print\" type=\"yes\" value=\"yes\"/>\n        </encoding>\n    </identification>\n    <defaults>\n        <scaling>\n            <millimeters>7.540625</millimeters>\n            <tenths>40</tenths>\n        </scaling>\n        <page-layout>\n            <page-height>1481</page-height>\n            <page-width>1145</page-width>\n            <page-margins type=\"both\">\n                <left-margin>58</left-margin>\n                <right-margin>58</right-margin>\n                <top-margin>66</top-margin>\n                <bottom-margin>66</bottom-margin>\n            </page-margins>\n        </page-layout>\n        <system-layout>\n            <system-margins>\n                <left-margin>225</left-margin>\n                <right-margin>0</right-margin>\n            </system-margins>\n            <system-distance>96</system-distance>\n            <top-system-distance>96</top-system-distance>\n        </system-layout>\n        <staff-layout>\n            <staff-distance>0</staff-distance>\n        </staff-layout>\n    </defaults>\n    <part-list>\n        <score-part id=\"P1\">\n            <part-name>Grand Piano</part-name>\n        </score-part>\n    </part-list>\n    <part id=\"P1\">\n      " + measures + "\n    </part>\n</score-partwise>\n";
};

var Measure = function Measure(props) {
  return React__default.createElement('measure', props);
};

var measureToXML = function measureToXML(measure) {
  return ReactDomServer.renderToStaticMarkup( /*#__PURE__*/React__default.createElement(Measure, {
    number: measure.index
  }, measure.attributes && attributesToXML(measure.attributes), measure.notes.map(function (note) {
    return noteToXML(note);
  })));
};

var Note = function Note(props) {
  return React__default.createElement('note', props);
};

var Chord = function Chord(props) {
  return React__default.createElement('chord', props);
};

var Pitch = function Pitch(props) {
  return React__default.createElement('pitch', props);
};

var Step = function Step(props) {
  return React__default.createElement('step', props);
};

var Alter = function Alter(props) {
  return React__default.createElement('alter', props);
};

var Octave = function Octave(props) {
  return React__default.createElement('octave', props);
};

var Duration = function Duration(props) {
  return React__default.createElement('duration', props);
};

var Voice = function Voice(props) {
  return React__default.createElement('voice', props);
};

var Type = function Type(props) {
  return React__default.createElement('type', props);
};

var Tie = function Tie(props) {
  return React__default.createElement('tie', props);
};

var Stem = function Stem(props) {
  return React__default.createElement('stem', props);
};

var Staff = function Staff(props) {
  return React__default.createElement('staff', props);
};

var Notations = function Notations(props) {
  return React__default.createElement('notations', props);
};

var Dot = function Dot(props) {
  return React__default.createElement('dot', props);
};

var Rest = function Rest(props) {
  return React__default.createElement('rest', props);
};

var Tied = function Tied(props) {
  return React__default.createElement('tied', props);
};

var Beam = function Beam(props) {
  return React__default.createElement('beam', props);
};

var noteToXML = function noteToXML(note) {
  return /*#__PURE__*/React__default.createElement(Note, null, note.chord && /*#__PURE__*/React__default.createElement(Chord, null), /*#__PURE__*/React__default.createElement(Pitch, null, /*#__PURE__*/React__default.createElement(Step, null, note.pitch.step), /*#__PURE__*/React__default.createElement(Alter, null, note.pitch.alter), /*#__PURE__*/React__default.createElement(Octave, null, note.pitch.octave)), note.rest && /*#__PURE__*/React__default.createElement(Rest, null), /*#__PURE__*/React__default.createElement(Duration, null, note.duration), /*#__PURE__*/React__default.createElement(Voice, null, "1"), note.dotted && /*#__PURE__*/React__default.createElement(Dot, null), /*#__PURE__*/React__default.createElement(Type, null, note.type), /*#__PURE__*/React__default.createElement(Beam, {
    number: "1"
  }, note.beam), /*#__PURE__*/React__default.createElement(Tie, {
    type: note.tie
  }), /*#__PURE__*/React__default.createElement(Stem, null, "up"), /*#__PURE__*/React__default.createElement(Staff, null, "1"), note.notations ? /*#__PURE__*/React__default.createElement(Notations, null, /*#__PURE__*/React__default.createElement(Tied, {
    orientation: "over",
    type: note.notations.tied
  })) : null);
};

var Attributes = function Attributes(props) {
  return React__default.createElement('attributes', props);
};

var Divisions = function Divisions(props) {
  return React__default.createElement('divisions', props);
};

var Key = function Key(props) {
  return React__default.createElement('key', props);
};

var Fifths = function Fifths(props) {
  return React__default.createElement('fifths', props);
};

var Mode = function Mode(props) {
  return React__default.createElement('mode', props);
};

var Time = function Time(props) {
  return React__default.createElement('time', props);
};

var Beats = function Beats(props) {
  return React__default.createElement('beats', props);
};

var BeatType = function BeatType(props) {
  return React__default.createElement('beat-type', props);
};

var Clef = function Clef(props) {
  return React__default.createElement('clef', props);
};

var Sign = function Sign(props) {
  return React__default.createElement('sign', props);
};

var Line = function Line(props) {
  return React__default.createElement('line', props);
};

var attributesToXML = function attributesToXML(attributes) {
  return /*#__PURE__*/React__default.createElement(Attributes, null, /*#__PURE__*/React__default.createElement(Divisions, null, attributes.divisions), /*#__PURE__*/React__default.createElement(Key, null, /*#__PURE__*/React__default.createElement(Fifths, null, attributes.key.fifths), /*#__PURE__*/React__default.createElement(Mode, null, attributes.key.mode)), /*#__PURE__*/React__default.createElement(Time, null, /*#__PURE__*/React__default.createElement(Beats, null, attributes.time.beats), /*#__PURE__*/React__default.createElement(BeatType, null, attributes.time.beatType)), /*#__PURE__*/React__default.createElement(Clef, null, /*#__PURE__*/React__default.createElement(Sign, null, attributes.clef.sign), /*#__PURE__*/React__default.createElement(Line, null, attributes.clef.line)));
};
var xmlDurationToVFMap = {
  maxima: null,
  "long": null,
  breve: null,
  whole: 'w',
  half: 'h',
  quarter: 'q',
  eighth: '8',
  '16th': '16',
  '32nd': '32',
  '64th': '64',
  '128th': '128',
  '256th': '256',
  '512th': '512',
  '1024th': '1024'
};
var xmlDurationToVF = function xmlDurationToVF(xmlDuration, isRest) {
  if (isRest === void 0) {
    isRest = false;
  }

  var restAddition = isRest ? 'r' : '';
  var vfDuration = xmlDurationToVFMap[xmlDuration] + restAddition;

  if (!vfDuration) {
    throw new Error("Note duration " + xmlDuration + " wasn't found or unsupported");
  }

  return vfDuration;
};
var xmlFifthsToKeyMap = {
  '-7': 'Cb',
  '-6': 'Gb',
  '-5': 'Db',
  '-4': 'Ab',
  '-3': 'Eb',
  '-2': 'Bb',
  '-1': 'F',
  '0': 'C',
  '1': 'G',
  '2': 'D',
  '3': 'A',
  '4': 'E',
  '5': 'B',
  '6': 'F#',
  '7': 'C#'
};
var xmlFifthsToKey = function xmlFifthsToKey(xmlFifths) {
  return xmlFifthsToKeyMap[xmlFifths];
};
var xmlKeyToFifths = function xmlKeyToFifths(xmlKey) {
  var key = Object.keys(xmlFifthsToKeyMap).find(function (k) {
    return xmlFifthsToKeyMap[k] === xmlKey;
  });
  return parseInt(key);
};
var getAccidental = {
  '-7': 'bbbbbbb',
  '-6': 'bbbbbb',
  '-5': 'bbbbb',
  '-4': 'bbbb',
  '-3': 'bbb',
  '-2': 'bb',
  '-1': 'b',
  '0': '',
  '1': '#',
  '2': '##',
  '3': '###',
  '4': '####',
  '5': '#####',
  '6': '######',
  '7': '#######'
};
var xmlSignToClefMap = {
  G: 'treble',
  F: 'bass'
};
var xmlSignToClef = function xmlSignToClef(xmlSign) {
  return xmlSignToClefMap[xmlSign];
};
var xmlMeasureToJS = function xmlMeasureToJS(measure) {
  var measuresArray = measure && measure.length ? measure : [measure];
  var measureObjs = measuresArray.map(function (m) {
    var note = m && m['note'];

    if (!note) {
      return {
        index: m._attributes.number,
        attributes: m && m.attributes && {
          clef: m.attributes.clef.sign._text,
          keySignature: m.attributes.key.fifths._text,
          beats: m.attributes.time.beats._text,
          beatType: m.attributes.time['beat-type']._text
        }
      };
    }

    var notes = note && note.length ? note : [note];
    return {
      index: m._attributes.number,
      attributes: m && m.attributes && {
        clef: m.attributes.clef.sign._text,
        keySignature: m.attributes.key.fifths._text,
        beats: m.attributes.time.beats._text,
        beatType: m.attributes.time['beat-type']._text
      },
      note: notes && notes.map(function (note) {
        return {
          chord: note.chord ? true : false,
          pitch: note.pitch.step._text + ("/" + note.pitch.octave._text),
          rest: note.rest ? true : false,
          type: note.type._text,
          alter: note.pitch.alter && note.pitch.alter._text,
          dotted: note.dot ? true : false,
          beam: note.beam && note.beam._text,
          tie: note.tie && note.tie._attributes && note.tie._attributes.type
        };
      })
    };
  });
  return measureObjs;
};
var musicXMLToJS = function musicXMLToJS(xml) {
  if (xml) {
    try {
      var result = convert.xml2js(xml, {
        compact: true
      });

      if (result && result['score-partwise']) {
        var partwise = result['score-partwise'];
        var part = partwise && partwise['part'];
        var partList = partwise && partwise['part-list'];
        var scorePart = partList && partList['score-part'];
        var partName = scorePart && scorePart['part-name'];
        var movementTitle = partwise && partwise['movement-title'];
        var measure = part && part['measure'];
        return {
          partWise: {
            defaults: 'Not Supported Yet!',
            identification: 'Not Supported Yet!',
            movementTitle: movementTitle._text,
            partList: {
              scorePart: {
                id: scorePart._attributes && scorePart._attributes.id,
                partName: partName._text
              }
            },
            part: {
              id: part._attributes && part._attributes.id,
              measure: xmlMeasureToJS(measure)
            },
            version: partwise._attributes && partwise._attributes.version
          }
        };
      }
    } catch (e) {
      throw e;
    }
  }
};

var styles$5 = {"noteButton":"_2gH6y"};

var NoteText = function NoteText(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/React__default.createElement("span", null, children);
};

var NoteButton = function NoteButton(_ref2) {
  var noteType = _ref2.noteType,
      onClick = _ref2.onClick,
      current = _ref2.current,
      isRest = _ref2.isRest,
      _ref2$className = _ref2.className,
      className = _ref2$className === void 0 ? '' : _ref2$className;
  var glyph;

  switch (noteType) {
    case 'whole':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD3B") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD5D");
      break;

    case 'half':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD3C") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD5E");
      break;

    case 'quarter':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD3D") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD5F");
      break;

    case 'eighth':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD3E") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD60");
      break;

    case '16th':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD3F") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD61");
      break;

    case '32nd':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD40") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD62");
      break;

    case '64th':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD41") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD63");
      break;

    case '128th':
      glyph = isRest ? /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD42") : /*#__PURE__*/React__default.createElement(NoteText, null, "\uD834\uDD64");
      break;
  }

  return /*#__PURE__*/React__default.createElement(ToggleButton, {
    checked: current === noteType,
    onClick: onClick,
    className: className,
    id: "noteButton-" + noteType
  }, /*#__PURE__*/React__default.createElement("span", {
    className: styles$5.noteButton
  }, glyph));
};

var VexNotes = [{
  note: "c/0",
  alt: null
}, {
  note: "c#/0",
  alt: "db/0"
}, {
  note: "d/0",
  alt: null
}, {
  note: "d#/0",
  alt: "eb/0"
}, {
  note: "e/0",
  alt: null
}, {
  note: "f/0",
  alt: null
}, {
  note: "f#/0",
  alt: "gb/0"
}, {
  note: "g/0",
  alt: null
}, {
  note: "g#/0",
  alt: "ab/0"
}, {
  note: "a/0",
  alt: null
}, {
  note: "a#/0",
  alt: "bb/0"
}, {
  note: "b/0",
  alt: null
}, {
  note: "c/1",
  alt: null
}, {
  note: "c#/1",
  alt: "db/1"
}, {
  note: "d/1",
  alt: null
}, {
  note: "d#/1",
  alt: "eb/1"
}, {
  note: "e/1",
  alt: null
}, {
  note: "f/1",
  alt: null
}, {
  note: "f#/1",
  alt: "gb/1"
}, {
  note: "g/1",
  alt: null
}, {
  note: "g#/1",
  alt: "ab/1"
}, {
  note: "a/1",
  alt: null
}, {
  note: "a#/1",
  alt: "bb/1"
}, {
  note: "b/1",
  alt: null
}, {
  note: "c/2",
  alt: null
}, {
  note: "c#/2",
  alt: "db/2"
}, {
  note: "d/2",
  alt: null
}, {
  note: "d#/2",
  alt: "eb/2"
}, {
  note: "e/2",
  alt: null
}, {
  note: "f/2",
  alt: null
}, {
  note: "f#/2",
  alt: "gb/2"
}, {
  note: "g/2",
  alt: null
}, {
  note: "g#/2",
  alt: "ab/2"
}, {
  note: "a/2",
  alt: null
}, {
  note: "a#/2",
  alt: "bb/2"
}, {
  note: "b/2",
  alt: null
}, {
  note: "c/3",
  alt: null
}, {
  note: "c#/3",
  alt: "db/3"
}, {
  note: "d/3",
  alt: null
}, {
  note: "d#/3",
  alt: "eb/3"
}, {
  note: "e/3",
  alt: null
}, {
  note: "f/3",
  alt: null
}, {
  note: "f#/3",
  alt: "gb/3"
}, {
  note: "g/3",
  alt: null
}, {
  note: "g#/3",
  alt: "ab/3"
}, {
  note: "a/3",
  alt: null
}, {
  note: "a#/3",
  alt: "bb/3"
}, {
  note: "b/3",
  alt: null
}, {
  note: "c/4",
  alt: null
}, {
  note: "c#/4",
  alt: "db/4"
}, {
  note: "d/4",
  alt: null
}, {
  note: "d#/4",
  alt: "eb/4"
}, {
  note: "e/4",
  alt: null
}, {
  note: "f/4",
  alt: null
}, {
  note: "f#/4",
  alt: "gb/4"
}, {
  note: "g/4",
  alt: null
}, {
  note: "g#/4",
  alt: "ab/4"
}, {
  note: "a/4",
  alt: null
}, {
  note: "a#/4",
  alt: "bb/4"
}, {
  note: "b/4",
  alt: null
}, {
  note: "c/5",
  alt: null
}, {
  note: "c#/5",
  alt: "db/5"
}, {
  note: "d/5",
  alt: null
}, {
  note: "d#/5",
  alt: "eb/5"
}, {
  note: "e/5",
  alt: null
}, {
  note: "f/5",
  alt: null
}, {
  note: "f#/5",
  alt: "gb/5"
}, {
  note: "g/5",
  alt: null
}, {
  note: "g#/5",
  alt: "ab/5"
}, {
  note: "a/5",
  alt: null
}, {
  note: "a#/5",
  alt: "bb/5"
}, {
  note: "b/5",
  alt: null
}, {
  note: "c/6",
  alt: null
}, {
  note: "c#/6",
  alt: "db/6"
}, {
  note: "d/6",
  alt: null
}, {
  note: "d#/6",
  alt: "eb/6"
}, {
  note: "e/6",
  alt: null
}, {
  note: "f/6",
  alt: null
}, {
  note: "f#/6",
  alt: "gb/6"
}, {
  note: "g/6",
  alt: null
}, {
  note: "g#/6",
  alt: "ab/6"
}, {
  note: "a/6",
  alt: null
}, {
  note: "a#/6",
  alt: "bb/6"
}, {
  note: "b/6",
  alt: null
}];
var newGNotes = [{
  note: "b/2",
  alt: null
}, {
  note: "c/3",
  alt: null
}, {
  note: "d/3",
  alt: null
}, {
  note: "e/3",
  alt: null
}, {
  note: "f/3",
  alt: null
}, {
  note: "g/3",
  alt: null
}, {
  note: "a/3",
  alt: null
}, {
  note: "b/3",
  alt: null
}, {
  note: "c/4",
  alt: null
}, {
  note: "d/4",
  alt: null
}, {
  note: "e/4",
  alt: null
}, {
  note: "f/4",
  alt: null
}, {
  note: "g/4",
  alt: null
}, {
  note: "a/4",
  alt: null
}, {
  note: "b/4",
  alt: null
}, {
  note: "c/5",
  alt: null
}, {
  note: "d/5",
  alt: null
}, {
  note: "e/5",
  alt: null
}, {
  note: "f/5",
  alt: null
}, {
  note: "g/5",
  alt: null
}, {
  note: "a/5",
  alt: null
}, {
  note: "b/6",
  alt: null
}, {
  note: "c/6",
  alt: null
}, {
  note: "d/6",
  alt: null
}, {
  note: "e/6",
  alt: null
}, {
  note: "f/6",
  alt: null
}, {
  note: "g/6",
  alt: null
}].reverse();
var newFNotes = [{
  note: "c/1",
  alt: null
}, {
  note: "d/1",
  alt: null
}, {
  note: "e/1",
  alt: null
}, {
  note: "f/1",
  alt: null
}, {
  note: "g/1",
  alt: null
}, {
  note: "a/1",
  alt: null
}, {
  note: "b/1",
  alt: null
}, {
  note: "c/2",
  alt: null
}, {
  note: "d/2",
  alt: null
}, {
  note: "e/2",
  alt: null
}, {
  note: "f/2",
  alt: null
}, {
  note: "g/2",
  alt: null
}, {
  note: "a/2",
  alt: null
}, {
  note: "b/2",
  alt: null
}, {
  note: "c/3",
  alt: null
}, {
  note: "d/3",
  alt: null
}, {
  note: "e/3",
  alt: null
}, {
  note: "f/3",
  alt: null
}, {
  note: "g/3",
  alt: null
}, {
  note: "a/3",
  alt: null
}, {
  note: "b/3",
  alt: null
}, {
  note: "c/4",
  alt: null
}, {
  note: "d/4",
  alt: null
}, {
  note: "e/4",
  alt: null
}, {
  note: "f/4",
  alt: null
}, {
  note: "g/4",
  alt: null
}, {
  note: "a/4",
  alt: null
}, {
  note: "b/4",
  alt: null
}].reverse();
var canBeamNote = function canBeamNote(noteType) {
  if (noteType === "eighth" || noteType === "16th" || noteType === "32nd") {
    return true;
  }

  return false;
};

var majorScales = {
  C: ["c", "d", "e", "f", "g", "a", "b"],
  G: ["g", "a", "b", "c", "d", "e", "f#"],
  D: ["d", "e", "f#", "g", "a", "b", "c#"],
  A: ["a", "b", "c#", "d", "e", "f#", "g#"],
  E: ["e", "f#", "g#", "a", "b", "c#", "d#"],
  B: ["b", "c#", "d#", "e", "f#", "g#", "a#"],
  "F#": ["f#", "g#", "a#", "b", "c#", "d#", "e"],
  "C#": ["c#", "d#", "e", "f#", "g#", "a#", "b#"],
  F: ["f", "g", "a", "bb", "c", "d", "e"],
  Bb: ["bb", "c", "d", "eb", "f", "g", "a"],
  Eb: ["eb", "f", "g", "ab", "bb", "c", "d"],
  Ab: ["ab", "bb", "c", "db", "eb", "f", "g"],
  Db: ["db", "eb", "f", "gb", "ab", "bb", "c"],
  Gb: ["gb", "ab", "bb", "cb", "db", "eb", "f"],
  Cb: ["c", "db", "eb", "fb", "gb", "ab", "bb"]
};
var minorScales = {
  Am: ["c", "d", "e", "f", "g", "a", "b"],
  Em: ["g", "a", "b", "c", "d", "e", "f#"],
  Bm: ["d", "e", "f#", "g", "a", "b", "c#"],
  "F#m": ["a", "b", "c#", "d", "e", "f#", "g#"],
  "C#m": ["e", "f#", "g#", "a", "b", "c#", "d#"],
  "G#m": ["b", "c#", "d#", "e", "f#", "g#", "a#"],
  "D#m": ["f#", "g#", "a#", "b", "c#", "d#", "e"],
  Dm: ["f", "g", "a", "bb", "c", "d", "e"],
  Gm: ["bb", "c", "d", "eb", "f", "g", "a"],
  Cm: ["eb", "f", "g", "ab", "bb", "c", "d"],
  Fm: ["ab", "bb", "c", "db", "eb", "f", "g"],
  Bbm: ["db", "eb", "f", "gb", "ab", "bb", "c"],
  Ebm: ["gb", "ab", "bb", "cb", "db", "eb", "f"]
};

var VF = Vex.Flow;
var Renderer = VF.Renderer;

function getCoords(e, svg, svgPt) {
  svgPt.x = e.clientX;
  svgPt.y = e.clientY;
  var svgCoords = svgPt.matrixTransform(svg.getScreenCTM().inverse());
  return {
    x: svgCoords.x,
    y: svgCoords.y
  };
}

var MusicXMLSheet = function MusicXMLSheet(_ref) {
  var id = _ref.id,
      xml = _ref.xml,
      _ref$selectedNote = _ref.selectedNote,
      selectedNote = _ref$selectedNote === void 0 ? null : _ref$selectedNote,
      _ref$setSelectedNote = _ref.setSelectedNote,
      setSelectedNote = _ref$setSelectedNote === void 0 ? null : _ref$setSelectedNote,
      _ref$readOnly = _ref.readOnly,
      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
      _ref$toggleReadOnly = _ref.toggleReadOnly,
      toggleReadOnly = _ref$toggleReadOnly === void 0 ? null : _ref$toggleReadOnly,
      _ref$noteType = _ref.noteType,
      noteType = _ref$noteType === void 0 ? null : _ref$noteType,
      _ref$appendNote = _ref.appendNote,
      appendNote = _ref$appendNote === void 0 ? null : _ref$appendNote,
      _ref$accidental = _ref.accidental,
      accidental = _ref$accidental === void 0 ? null : _ref$accidental,
      _ref$isRest = _ref.isRest,
      isRest = _ref$isRest === void 0 ? false : _ref$isRest,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$playNotesCompone = _ref.playNotesComponent,
      playNotesComponent = _ref$playNotesCompone === void 0 ? null : _ref$playNotesCompone;
  var partWise = xml.partWise;
  var measures = partWise.part.measure;

  var _useState = React.useState({
    measure: null,
    note: null
  }),
      highlightIndex = _useState[0],
      setHightlightIndex = _useState[1];

  var _useState2 = React.useState(xmlFifthsToKey(measures[0].attributes.keySignature)),
      keySignature = _useState2[0],
      setKeySignature = _useState2[1];

  var _useState3 = React.useState(null),
      newNote = _useState3[0],
      setNewNote = _useState3[1];

  var _useState4 = React.useState(null),
      hoveringNote = _useState4[0],
      setHoveringNote = _useState4[1];

  var _useState5 = React.useState(null),
      renderer = _useState5[0],
      setRenderer = _useState5[1];

  var _useState6 = React.useState(null),
      context = _useState6[0],
      setContext = _useState6[1];

  var _useState7 = React.useState([]),
      staves = _useState7[0],
      setStaves = _useState7[1];

  var container = React.useRef();
  var formatter = new Vex.Flow.Formatter();
  var clef = measures[0].attributes.clef;
  var uiAvailableNotes = clef === 'G' ? newGNotes : newFNotes;

  var handleClick = function handleClick(e) {
    if (newNote) appendNote(newNote, accidental);else if (hoveringNote) {
      var first = hoveringNote.newNote.note.pitch;
      var second = hoveringNote.hoveringNote.keys;

      if (second.includes(first)) {
        setSelectedNote({
          measureIndex: hoveringNote.measureIndex,
          noteIndex: hoveringNote.noteIndex
        });
      } else {
        appendNote(hoveringNote.newNote, accidental, hoveringNote);
        setSelectedNote(null);
      }
    }
    setNewNote(null);
  };

  var handleHover = function handleHover(e) {
    if (context) {
      var svgPoint = context.svg.createSVGPoint();
      var coords = getCoords(e, context.svg, svgPoint);

      if (coords.x !== lastCoords.x && coords.y !== lastCoords.y) {
        lastCoords = coords;
        staves.forEach(function (stave, index) {
          var bb = stave.getBoundingBox();
          var staveKeySig;

          if (stave && stave.getModifiers && stave.getModifiers()[4]) {
            staveKeySig = stave.getModifiers()[4]['keySpec'];
          } else {
            staveKeySig = keySignature;
          }

          var scale = _extends({}, majorScales, minorScales)[staveKeySig];

          if (coords.x > bb.x && coords.x < bb.x + bb.w && coords.y > bb.y && coords.y < bb.y + bb.h) {
            var mouseY = coords.y - bb.y;
            var mouseX = coords.x - bb.x;
            var noteArea = Math.round(mouseY / (stave.options.spacing_between_lines_px / 2));
            var note = uiAvailableNotes[noteArea].note;
            var alter = 0;

            if (!scale.includes(note.slice(0, note.length - 2)) && !isRest && accidental !== 'n') {
              var _fifths = xmlKeyToFifths(staveKeySig);

              if (_fifths < 0) {
                alter = -1;
              } else if (_fifths > 0) {
                alter = 1;
              }
            }

            var newNewNote = {
              measure: index,
              note: {
                pitch: note.toUpperCase(),
                type: noteType,
                alter: alter,
                dotted: false,
                beam: null
              },
              clef: clef === 'G' ? 'treble' : 'bass',
              x: mouseX
            };
            var hoveringOverNote = false;
            stave.voices && stave.voices.forEach(function (voice) {
              var ticks = voice.getTickables();
              ticks.forEach(function (tick, tickIndex) {
                var tickBB = tick.getBoundingBox();

                if (coords.x > tickBB.getX() && coords.x < tickBB.getX() + tickBB.getW()) {
                  hoveringOverNote = true;
                  setNewNote(null);
                  setHoveringNote({
                    measureIndex: index,
                    hoveringNote: tick,
                    newNote: newNewNote,
                    noteIndex: tickIndex
                  });
                }
              });
            });

            if (!hoveringOverNote && noteArea >= 0 && noteArea < uiAvailableNotes.length) {
              setNewNote(newNewNote);
              setHoveringNote(null);
            }
          }
        });
      }
    }
  };

  var handleMouseLeave = function handleMouseLeave(e) {
    setNewNote(null);
  };

  var lastCoords = {
    x: 0,
    y: 0
  };
  var fifths = xmlKeyToFifths(keySignature);
  var width = 160 + Math.abs(fifths) * 20;
  var height = 120;
  var padding = 10;
  var measuresPerLine = 4;
  var lines = Math.ceil(measures.length / measuresPerLine) - 1;
  var lengths = measures.map(function (measure) {
    var length = measure.note && measure.note.length ? measure.note.length : 0;
    return width + length * 15;
  });
  var lineLengths = lengths.slice(0, measuresPerLine);
  var containerWidth = lineLengths.reduce(function (accum, current) {
    return accum + current;
  }, 0);
  React.useEffect(function () {
    if (!renderer && xml) {
      setRenderer(new Renderer(container.current, Renderer.Backends.SVG));
    } else if (renderer && xml && !context) {
      if (!context) setContext(renderer.getContext());
    }
  });
  React.useEffect(function () {
    if (renderer && xml && context) {
      renderer.resize(containerWidth + padding, height + height * lines);
      var newLineIndex = 0;
      var measureCount = 0;

      try {
        context.clear();
        var allStaves = [];
        measures.forEach(function (measure, measureIndex) {
          var notes = measure.note;
          var newAttributes = measure.attributes;
          var notesLength = notes && notes.length || 0;
          var prevMeasures = measures.slice(newLineIndex, measureIndex);
          var prevLengths = prevMeasures.map(function (measure) {
            var length = measure.note && measure.note.length ? measure.note.length : 0;
            return width + length * 15;
          });
          var l = prevLengths.reduce(function (accum, current) {
            return accum + current;
          }, 0);
          var x = measureCount === 0 ? 0 : l;
          var y = newLineIndex / measuresPerLine * height;
          var stave = new VF.Stave(x, y, width + notesLength * 15);
          var attributes = measures[0].attributes;

          if (measureCount === 0) {
            newAttributes = attributes;
          }

          if (newAttributes) {
            attributes = newAttributes;
            var _attributes = attributes,
                _clef = _attributes.clef,
                _keySignature = _attributes.keySignature,
                beats = _attributes.beats,
                beatType = _attributes.beatType;

            if (_clef) {
              stave.addClef(xmlSignToClef(_clef)).addTimeSignature(beats + "/" + beatType);
              var vfKeySig = xmlFifthsToKey(_keySignature);
              stave.setKeySignature(vfKeySig, vfKeySig);
              setKeySignature(vfKeySig);
            }
          }

          measureCount += 1;

          if (measureCount === measuresPerLine) {
            measureCount = 0;
            newLineIndex += measuresPerLine;
          }

          stave.setContext(context).draw();
          allStaves.push(stave);
          var beams = [];
          var newBeam = [];
          var ties = [];
          var newTie = {};
          var tieStarted = false;
          var vexNotes = [];

          var getNext = function getNext(current, noteIndex) {
            var next = notes[noteIndex + 1];

            if (next && next.chord) {
              return [current].concat(getNext(next, noteIndex + 1));
            }

            return [current];
          };

          if (notes) {
            var selectIndex = 0;
            notes.forEach(function (note, index, arr) {
              if (!note.chord) {
                var next = getNext(note, index);
                var sortedNext = next.sort(function (a, b) {
                  var aNoteIndex = VexNotes.findIndex(function (item) {
                    return item.note === a.pitch.toLowerCase() || item.alt === a.pitch.toLowerCase();
                  });
                  var bNoteIndex = VexNotes.findIndex(function (item) {
                    return item.note === b.pitch.toLowerCase() || item.alt === b.pitch.toLowerCase();
                  });
                  return aNoteIndex > bNoteIndex ? 1 : -1;
                });
                var pitches = sortedNext.map(function (note) {
                  return note.pitch;
                });
                var staveNote = new VF.StaveNote({
                  clef: clef === 'G' ? 'treble' : 'bass',
                  keys: pitches,
                  duration: xmlDurationToVF(note.type, note.rest),
                  auto_stem: !note.beam
                });

                if (selectedNote && measureIndex === selectedNote.measureIndex && selectIndex === selectedNote.noteIndex) {
                  staveNote.setStyle({
                    fillStyle: '#2bcebb',
                    strokeStyle: '#2bcebb'
                  });
                }

                if (highlightIndex && measure.index === highlightIndex.measure && index === highlightIndex.note) {
                  staveNote.setStyle({
                    fillStyle: '#ce2cbd',
                    strokeStyle: '#ce2cbd'
                  });
                }

                var scale = _extends({}, majorScales, minorScales)[xmlFifthsToKey(attributes.keySignature)];

                var n = note.pitch.slice(0, note.pitch.length - 2).toLowerCase();
                var withAccidental = n + getAccidental[note.alter];

                if (!scale.includes(withAccidental) && !note.rest) {
                  var i = sortedNext.findIndex(function (item) {
                    return item.pitch === note.pitch;
                  });

                  if (note.alter > 0) {
                    staveNote.addAccidental(i, new VF.Accidental('#'));
                  } else if (note.alter < 0) {
                    staveNote.addAccidental(i, new VF.Accidental('b'));
                  } else {
                    staveNote.addAccidental(i, new VF.Accidental('n'));
                  }
                }

                if (note.dotted) {
                  staveNote.addDot(0);
                }

                if (note.beam && note.beam === 'begin') {
                  newBeam.push(staveNote);
                }

                if (note.beam && note.beam === 'end' || note.beam && note.beam === 'begin' && index !== 0 && index === notes.length - 1) {
                  newBeam.push(staveNote);
                  beams.push(newBeam);
                  newBeam = [];
                }

                if (note.tie && !tieStarted && note.tie === 'start') {
                  newTie = {
                    first_note: staveNote
                  };
                  tieStarted = true;
                }

                if (note.tie && note.tie === 'stop') {
                  newTie = _extends({}, newTie, {
                    last_note: staveNote
                  });
                  ties.push(newTie);
                  newTie = {};
                  tieStarted = false;
                }

                vexNotes.push(staveNote);
                selectIndex += 1;
              }
            });
          }

          if (vexNotes.length > 0) {
            var voice = new Vex.Flow.Voice({
              num_beats: attributes.beats,
              beat_value: attributes.beatType
            }).setMode(Vex.Flow.Voice.Mode.SOFT);
            voice.addTickables(vexNotes);
            formatter.joinVoices([voice]).formatToStave([voice], stave, {
              align_rests: true,
              context: context
            });
            var allTies = ties.map(function (tie) {
              return new VF.StaveTie({
                first_note: tie.first_note,
                last_note: tie.last_note,
                first_indices: [0],
                last_indices: [0]
              });
            });
            var allBeams = beams.map(function (beamNotes) {
              return new VF.Beam(beamNotes);
            });
            voice.draw(context, stave);
            allBeams.forEach(function (b) {
              b.setContext(context).draw();
            });
            allTies.forEach(function (t) {
              t.setContext(context).draw();
            });
            stave.voices = [voice];
          }
        });
        setStaves(allStaves);
      } catch (e) {
        console.error(e);
      }
    }
  }, [measures, renderer, context, newNote, selectedNote, highlightIndex]);
  React.useEffect(function () {
    if (newNote) {
      var stave = staves[newNote.measure];
      var uiNote = new VF.StaveNote({
        keys: [newNote.note.pitch],
        duration: xmlDurationToVF(newNote.note.type, isRest),
        auto_stem: true,
        clef: newNote.clef
      });
      uiNote.setStyle({
        fillStyle: 'lightgrey',
        strokeStyle: 'lightgrey'
      });
      var voice = new Vex.Flow.Voice({
        num_beats: 4,
        beat_value: 4
      }).setMode(Vex.Flow.Voice.Mode.SOFT);
      voice.addTickables([uiNote]);
      formatter.joinVoices([voice]).formatToStave([voice], stave, {
        align_rests: true,
        context: context
      });
      uiNote.setXShift(uiNote.getX() + newNote.x - (newNote.measure === 0 || newNote.measure % measuresPerLine === 0 ? Math.abs(fifths) * 15 + 80 : 25));
      voice.draw(context, stave);
    }
  }, [newNote]);
  var PlayNotes = playNotesComponent;
  return /*#__PURE__*/React__default.createElement("div", null, readOnly ? /*#__PURE__*/React__default.createElement("div", {
    id: id,
    ref: container
  }) : /*#__PURE__*/React__default.createElement("div", {
    id: id,
    ref: container,
    onClick: handleClick,
    onMouseMove: handleHover,
    onMouseLeave: handleMouseLeave
  }), /*#__PURE__*/React__default.createElement("div", {
    className: "d-flex"
  }, playNotesComponent && /*#__PURE__*/React__default.createElement(PlayNotes, {
    measures: measures,
    setHightlightIndex: setHightlightIndex,
    toggleReadOnly: toggleReadOnly
  }), children));
};

var BackspaceIcon = function BackspaceIcon() {
  return /*#__PURE__*/React__default.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    "fill-rule": "evenodd",
    d: "M6.603 2h7.08a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1h-7.08a1 1 0 0 1-.76-.35L1 8l4.844-5.65A1 1 0 0 1 6.603 2zm7.08-1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zM5.829 5.146a.5.5 0 0 0 0 .708L7.976 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z"
  }));
};

var PlusIcon = function PlusIcon() {
  return /*#__PURE__*/React__default.createElement("svg", {
    width: "1em",
    height: "1em",
    viewBox: "0 0 16 16",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, /*#__PURE__*/React__default.createElement("path", {
    "fill-rule": "evenodd",
    d: "M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"
  }));
};

var ScoreEditor = function ScoreEditor(_ref) {
  var _ref$readOnly = _ref.readOnly,
      readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
      _ref$createScore = _ref.createScore,
      createScore = _ref$createScore === void 0 ? null : _ref$createScore,
      _ref$createScoreLabel = _ref.createScoreLabel,
      createScoreLabel = _ref$createScoreLabel === void 0 ? null : _ref$createScoreLabel,
      _ref$notesCallback = _ref.notesCallback,
      notesCallback = _ref$notesCallback === void 0 ? null : _ref$notesCallback,
      _ref$scoreCallback = _ref.scoreCallback,
      scoreCallback = _ref$scoreCallback === void 0 ? null : _ref$scoreCallback,
      _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$playNotesCompone = _ref.playNotesComponent,
      playNotesComponent = _ref$playNotesCompone === void 0 ? null : _ref$playNotesCompone;

  var _useState = React.useState([{
    index: 0,
    notes: [],
    attributes: {
      divisions: 2,
      key: {
        fifths: 0,
        mode: 'major'
      },
      time: {
        beats: 4,
        beatType: 4
      },
      clef: {
        sign: 'G',
        line: 2
      }
    }
  }]),
      measures = _useState[0],
      setMeasures = _useState[1];

  var _useState2 = React.useState(0),
      currentMeasureIndex = _useState2[0],
      setCurrentMeasureIndex = _useState2[1];

  var _useState3 = React.useState(null),
      selectedNote = _useState3[0],
      setSelectedNote = _useState3[1];

  var _useState4 = React.useState('whole'),
      noteType = _useState4[0],
      setNoteType = _useState4[1];

  var _useState5 = React.useState(false),
      isRest = _useState5[0],
      setIsRest = _useState5[1];

  var _useState6 = React.useState(null),
      accidental = _useState6[0],
      setAccidental = _useState6[1];

  var _useState7 = React.useState(null),
      beam = _useState7[0],
      setBeam = _useState7[1];

  var _useState8 = React.useState(false),
      dotted = _useState8[0],
      setDotted = _useState8[1];

  var addMeasure = function addMeasure() {
    var newIndex = currentMeasureIndex + 1;
    var newMeasure = {
      index: newIndex,
      notes: [],
      attributes: null
    };
    setMeasures([].concat(measures, [newMeasure]));
    setCurrentMeasureIndex(newIndex);
  };

  var appendNote = function appendNote(vfNote, accidental, appendTo) {
    if (appendTo === void 0) {
      appendTo = null;
    }

    var note = vfNote.note,
        measureIndex = vfNote.measure;

    if (note && note.pitch) {
      var alter = note.alter;

      if (accidental === '#') {
        alter += 1;
      }

      if (accidental === 'b') {
        alter += -1;
      }

      var newMeasures = measures.map(function (measure) {
        if (measure.index === measureIndex) {
          if (appendTo) {
            var newNote = {
              chord: appendTo,
              pitch: {
                step: note.pitch[0],
                alter: alter,
                octave: note.pitch[note.pitch.length - 1]
              },
              rest: isRest,
              duration: 1,
              dotted: dotted,
              type: note.type,
              beam: beam
            };
            var newNotes = measure.notes;
            var chordIndex = 0;
            var i = 0;

            while (chordIndex <= appendTo.noteIndex) {
              if (!newNotes[i].chord) {
                chordIndex += 1;
              }

              i++;
            }

            newNotes.splice(i + 1, 0, newNote);
            return _extends({}, measure, {
              notes: newNotes
            });
          }

          return _extends({}, measure, {
            notes: [].concat(measure.notes, [{
              chord: appendTo,
              pitch: {
                step: note.pitch[0],
                alter: alter,
                octave: note.pitch[note.pitch.length - 1]
              },
              rest: isRest,
              duration: 1,
              dotted: dotted,
              type: note.type,
              beam: beam
            }])
          });
        }

        return measure;
      });
      setMeasures(newMeasures);
      setSelectedNote({
        measureIndex: currentMeasureIndex,
        noteIndex: newMeasures[currentMeasureIndex].notes.length - 1
      });

      if (beam === 'end') {
        setBeam(null);
      }

      if (notesCallback) {
        notesCallback(newMeasures[currentMeasureIndex].notes, newMeasures[currentMeasureIndex].attributes.key);
      }
    }
  };

  var removeNote = function removeNote() {
    if (selectedNote && measures[currentMeasureIndex] && measures[currentMeasureIndex].notes.length > 0) {
      var note = measures[selectedNote.measureIndex].notes[selectedNote.noteIndex];

      var getNext = function getNext(current, noteIndex) {
        var next = measures[selectedNote.measureIndex].notes[noteIndex + 1];

        if (next && next.chord) {
          return [current].concat(getNext(next, noteIndex + 1));
        }

        return [current];
      };

      if (!note.chord) {
        var nextNotes = getNext(note, selectedNote.noteIndex);

        if (nextNotes.length > 1) {
          nextNotes[1].chord = null;
        }
      }

      var notesToRemove = [note];
      setMeasures(measures.map(function (measure, measureIndex) {
        if (measureIndex === selectedNote.measureIndex) {
          return _extends({}, measure, {
            notes: measure.notes.filter(function (n) {
              return !notesToRemove.includes(n);
            })
          });
        }

        return measure;
      }));
      var newNoteIndex = measures[currentMeasureIndex].notes.length - 2;

      if (newNoteIndex < 0) {
        setSelectedNote(null);
      } else {
        setSelectedNote({
          measureIndex: currentMeasureIndex,
          noteIndex: newNoteIndex
        });
      }
    } else if (measures[currentMeasureIndex] && measures[currentMeasureIndex].notes && measures[currentMeasureIndex].notes.length > 0) {
      var newNotes = measures[currentMeasureIndex].notes.slice(0, -1);
      setMeasures(measures.map(function (measure) {
        if (measure.index === currentMeasureIndex) {
          return _extends({}, measure, {
            notes: newNotes
          });
        }

        return measure;
      }));
      setSelectedNote({
        measureIndex: currentMeasureIndex,
        noteIndex: measures[currentMeasureIndex].notes.length - 2
      });
    } else if (measures.length > 1) {
      var newMeasures = measures;
      newMeasures.splice(currentMeasureIndex, 1);
      setMeasures(newMeasures);
      setCurrentMeasureIndex(currentMeasureIndex - 1);
    }
  };

  var updateClef = function updateClef(e) {
    var newValue = e.target.value;
    setMeasures(measures.map(function (measure) {
      if (measure.index === 0) {
        return _extends({}, measure, {
          attributes: _extends({}, attributes, {
            clef: {
              sign: newValue,
              line: attributes.clef.line
            }
          })
        });
      }

      return measure;
    }));
  };

  var tieNote = function tieNote() {
    setMeasures(measures.map(function (measure, measureIndex) {
      if (measureIndex === selectedNote.measureIndex) {
        return _extends({}, measure, {
          notes: measure.notes.map(function (note, index) {
            if (index === selectedNote.noteIndex) {
              if (note.tie) {
                return _extends({}, note, {
                  tie: null
                });
              }

              return _extends({}, note, {
                tie: 'start'
              });
            } else if (index === selectedNote.noteIndex + 1) {
              if (note.tie) {
                return _extends({}, note, {
                  tie: null
                });
              }

              return _extends({}, note, {
                tie: 'stop'
              });
            }

            return note;
          })
        });
      }

      return measure;
    }));
  };

  var xmlSheet = xmlString(measures.map(function (measure) {
    return measureToXML(measure);
  }));
  var parsedXML = musicXMLToJS(xmlSheet);

  if (scoreCallback) {
    scoreCallback(parsedXML);
  }

  var currentMeasure = measures[currentMeasureIndex];
  var attributes = currentMeasure && currentMeasure.attributes;

  if (!attributes) {
    attributes = measures[0].attributes;
  }

  var canTie = false;

  if (selectedNote) {
    var nextNote = measures[selectedNote.measureIndex].notes[selectedNote.noteIndex + 1];

    if (nextNote) {
      var selected = measures[selectedNote.measureIndex].notes[selectedNote.noteIndex];

      if (selected.pitch.step === nextNote.pitch.step && selected.pitch.octave === nextNote.pitch.octave) {
        canTie = true;
      }
    }
  }

  return /*#__PURE__*/React__default.createElement("div", null, !readOnly && /*#__PURE__*/React__default.createElement(Navbar, null, /*#__PURE__*/React__default.createElement(Dropdown, {
    onChange: updateClef
  }, /*#__PURE__*/React__default.createElement("option", {
    key: "clef-dropdown-0"
  }, "G"), /*#__PURE__*/React__default.createElement("option", {
    key: "clef-dropdown-1"
  }, "F")), /*#__PURE__*/React__default.createElement("form", {
    className: "" + styles$4.form
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "number",
    "aria-label": "Beat",
    value: attributes && attributes.time.beats,
    className: styles$4.timeInput,
    style: {
      textAlign: 'right'
    },
    onChange: function onChange(e) {
      setMeasures(measures.map(function (measure) {
        if (measure.index === 0) {
          return _extends({}, measure, {
            attributes: _extends({}, measure.attributes, {
              time: {
                beats: parseInt(e.target.value),
                beatType: measure.attributes.time.beatType
              }
            })
          });
        }

        return measure;
      }));
    }
  })), /*#__PURE__*/React__default.createElement("form", {
    className: "" + styles$4.form
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "number",
    "aria-label": "Time",
    value: attributes && attributes.time.beatType,
    style: {
      textAlign: 'left'
    },
    className: styles$4.timeInput,
    onChange: function onChange(e) {
      setMeasures(measures.map(function (measure) {
        if (measure.index === 0) {
          return _extends({}, measure, {
            attributes: _extends({}, measure.attributes, {
              time: {
                beatType: parseInt(e.target.value),
                beats: measure.attributes.time.beats
              }
            })
          });
        }

        return measure;
      }));
    }
  })), /*#__PURE__*/React__default.createElement("form", {
    className: styles$4.form + " " + styles$4.tooltip
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "number",
    "aria-label": "Fifths",
    value: attributes && attributes.key.fifths,
    onChange: function onChange(e) {
      setMeasures(measures.map(function (measure) {
        if (measure.index === 0) {
          return _extends({}, measure, {
            attributes: _extends({}, measure.attributes, {
              key: {
                fifths: parseInt(e.target.value),
                mode: measure.attributes.key.mode
              }
            })
          });
        }

        return measure;
      }));
    }
  })), /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement(ToggleButton, {
    checked: accidental === '#',
    onClick: function onClick(e) {
      if (accidental !== '#') {
        setAccidental('#');
      } else {
        setAccidental(null);
      }
    }
  }, "\u266F"), /*#__PURE__*/React__default.createElement(ToggleButton, {
    checked: accidental === 'b',
    onClick: function onClick(e) {
      if (accidental !== 'b') {
        setAccidental('b');
      } else {
        setAccidental(null);
      }
    }
  }, "\u266D"), /*#__PURE__*/React__default.createElement(ToggleButton, {
    checked: accidental === 'n',
    onClick: function onClick(e) {
      if (accidental !== 'n') {
        setAccidental('n');
      } else {
        setAccidental(null);
      }
    }
  }, "\u266E")), /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement(ToggleButton, {
    id: "restToggleButton",
    checked: isRest,
    onClick: function onClick() {
      setIsRest(true);
    }
  }, "rest"), /*#__PURE__*/React__default.createElement(ToggleButton, {
    id: "noteToggleButton",
    checked: !isRest,
    onClick: function onClick() {
      setIsRest(false);
    }
  }, "note")), /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "whole",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('whole');
    }
  }), /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "half",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('half');
    }
  }), /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "quarter",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('quarter');
    }
  }), /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "eighth",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('eighth');
    }
  }), /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "16th",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('16th');
    }
  }), /*#__PURE__*/React__default.createElement(NoteButton, {
    noteType: "32nd",
    current: noteType,
    isRest: isRest,
    onClick: function onClick() {
      return setNoteType('32nd');
    }
  })), /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement(ToggleButton, {
    id: "dottedToggleButton",
    checked: dotted,
    onClick: function onClick(e) {
      return setDotted(!dotted);
    }
  }, "Dot"), /*#__PURE__*/React__default.createElement(ToggleButton, {
    id: "beamToggleButton",
    disabled: !canBeamNote(noteType),
    checked: beam === 'begin' ? true : false,
    onClick: function onClick(e) {
      if (beam === null) {
        setBeam('begin');
      } else if (beam === 'begin') {
        setMeasures(measures.map(function (measure) {
          if (measure.index === measures.length - 1) {
            return _extends({}, measure, {
              notes: measure.notes.map(function (note, index) {
                if (index === measure.notes.length - 1) {
                  return _extends({}, note, {
                    beam: 'end'
                  });
                }

                return note;
              })
            });
          }

          return measure;
        }));
        setBeam(null);
      }
    }
  }, "Beam")), /*#__PURE__*/React__default.createElement(ButtonGroup, null, /*#__PURE__*/React__default.createElement(Button, {
    disabled: !canTie,
    id: "tieButton",
    onClick: tieNote
  }, "Tie"), /*#__PURE__*/React__default.createElement(Button, {
    id: "removeNoteButton",
    onClick: removeNote
  }, /*#__PURE__*/React__default.createElement(BackspaceIcon, null)), /*#__PURE__*/React__default.createElement(Button, {
    id: "addMeasureButton",
    onClick: function onClick() {
      return addMeasure();
    }
  }, /*#__PURE__*/React__default.createElement(PlusIcon, null)), createScoreLabel && /*#__PURE__*/React__default.createElement(Button, {
    className: "ml-4",
    onClick: function onClick() {
      return createScore(xmlSheet);
    }
  }, createScoreLabel))), /*#__PURE__*/React__default.createElement(MusicXMLSheet, {
    id: "xmlsheet",
    xml: parsedXML,
    noteType: noteType,
    appendNote: appendNote,
    accidental: accidental,
    isRest: isRest,
    selectedNote: selectedNote,
    setSelectedNote: setSelectedNote,
    playNotesComponent: playNotesComponent
  }), /*#__PURE__*/React__default.createElement("div", null, children));
};

exports.MusicXMLSheet = MusicXMLSheet;
exports.ScoreEditor = ScoreEditor;
//# sourceMappingURL=index.js.map
