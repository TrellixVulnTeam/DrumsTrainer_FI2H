'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var abcjs = _interopDefault(require('abcjs'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SheetMusic = function SheetMusic(_ref) {
  var isPlaying = _ref.isPlaying,
      notation = _ref.notation,
      bpm = _ref.bpm,
      _ref$scale = _ref.scale,
      scale = _ref$scale === void 0 ? 1 : _ref$scale,
      className = _ref.className,
      onBeat = _ref.onBeat,
      onEvent = _ref.onEvent,
      onLineEnd = _ref.onLineEnd;
  // const paper = React.useRef();
  var timer = React.useRef();

  if (!notation) {
    return null;
  }

  React.useEffect(function () {
    var tune = abcjs.renderAbc('paper', notation, {
      add_classes: true,
      scale: scale,
      staffwidth: 1200
    });
    timer.current = new abcjs.TimingCallbacks(tune[0], {
      qpm: bpm,
      beatSubdivisions: 4,
      beatCallback: function beatCallback(beatNumber, totalBeats, totalTime) {
        if (typeof onBeat === 'function') {
          onBeat(beatNumber, totalBeats, totalTime);
        }
      },
      lineEndCallback: function lineEndCallback(info) {
        if (typeof onLineEnd === 'function') {
          onLineEnd(info);
        }
      },
      eventCallback: function eventCallback(event) {
        if (typeof onEvent === 'function') {
          if (event === null) {
            onEvent(null);
          } else {
            // Event.midiPitches isn't working, so we need to work out pitch from ABC notation
            // const note = notation[event.startChar];
            var note = notation.slice(event.startChar, event.endChar);
            onEvent(_extends({}, event, {
              note: note
            }));
          }
        }

        if (!event) {
          return null;
        } // const notes = document.getElementsByClassName('abcjs-note');
        // const rests = document.getElementsByClassName('abcjs-rest');
        // for (let note of notes) {
        //   note.classList.remove('abcjs-note-playing');
        // }
        // for (let rest of rests) {
        //   rest.classList.remove('abcjs-note-playing');
        // }
        // event.elements.forEach(element => {
        //   element[0].classList.add('abcjs-note-playing');
        // });


        return null;
      }
    });
    /* eslint-disable */
  }, [JSON.stringify(notation)]);
  /* eslint-enable */

  React.useEffect(function () {
    if (timer && timer.current) {
      if (isPlaying) {
        timer.current.start();
      } else {
        timer.current.stop();
      }
    }
  }, [isPlaying]);
  return React.createElement(React.Fragment, null, React.createElement("div", {
    id: "paper",
    // ref={paper}
    className: className || ''
  }), React.createElement("style", null, "\n          #paper .abcjs-note, #paper .abcjs-rest {\n            transition: 0.2s;\n          }\n\n          #paper .abcjs-note-playing {\n            fill: #d10fc9;\n          }\n        "));
};

exports.default = SheetMusic;
//# sourceMappingURL=react-sheet-music.cjs.development.js.map
