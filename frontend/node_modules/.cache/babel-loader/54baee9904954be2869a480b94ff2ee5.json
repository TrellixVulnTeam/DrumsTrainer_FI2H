{"ast":null,"code":"import React from 'react';\nimport abcjs from 'abcjs';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar SheetMusic = function SheetMusic(_ref) {\n  var isPlaying = _ref.isPlaying,\n      notation = _ref.notation,\n      bpm = _ref.bpm,\n      _ref$scale = _ref.scale,\n      scale = _ref$scale === void 0 ? 1 : _ref$scale,\n      className = _ref.className,\n      onBeat = _ref.onBeat,\n      onEvent = _ref.onEvent,\n      onLineEnd = _ref.onLineEnd; // const paper = React.useRef();\n\n  var timer = React.useRef();\n\n  if (!notation) {\n    return null;\n  }\n\n  React.useEffect(function () {\n    var tune = abcjs.renderAbc('paper', notation, {\n      add_classes: true,\n      scale: scale,\n      staffwidth: 1200\n    });\n    timer.current = new abcjs.TimingCallbacks(tune[0], {\n      qpm: bpm,\n      beatSubdivisions: 4,\n      beatCallback: function beatCallback(beatNumber, totalBeats, totalTime) {\n        if (typeof onBeat === 'function') {\n          onBeat(beatNumber, totalBeats, totalTime);\n        }\n      },\n      lineEndCallback: function lineEndCallback(info) {\n        if (typeof onLineEnd === 'function') {\n          onLineEnd(info);\n        }\n      },\n      eventCallback: function eventCallback(event) {\n        if (typeof onEvent === 'function') {\n          if (event === null) {\n            onEvent(null);\n          } else {\n            // Event.midiPitches isn't working, so we need to work out pitch from ABC notation\n            // const note = notation[event.startChar];\n            var note = notation.slice(event.startChar, event.endChar);\n            onEvent(_extends({}, event, {\n              note: note\n            }));\n          }\n        }\n\n        if (!event) {\n          return null;\n        } // const notes = document.getElementsByClassName('abcjs-note');\n        // const rests = document.getElementsByClassName('abcjs-rest');\n        // for (let note of notes) {\n        //   note.classList.remove('abcjs-note-playing');\n        // }\n        // for (let rest of rests) {\n        //   rest.classList.remove('abcjs-note-playing');\n        // }\n        // event.elements.forEach(element => {\n        //   element[0].classList.add('abcjs-note-playing');\n        // });\n\n\n        return null;\n      }\n    });\n    /* eslint-disable */\n  }, [JSON.stringify(notation)]);\n  /* eslint-enable */\n\n  React.useEffect(function () {\n    if (timer && timer.current) {\n      if (isPlaying) {\n        timer.current.start();\n      } else {\n        timer.current.stop();\n      }\n    }\n  }, [isPlaying]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    id: \"paper\",\n    // ref={paper}\n    className: className || ''\n  }), React.createElement(\"style\", null, \"\\n          #paper .abcjs-note, #paper .abcjs-rest {\\n            transition: 0.2s;\\n          }\\n\\n          #paper .abcjs-note-playing {\\n            fill: #d10fc9;\\n          }\\n        \"));\n};\n\nexport default SheetMusic;","map":{"version":3,"sources":["../src/SheetMusic.tsx"],"names":["SheetMusic","isPlaying","notation","bpm","scale","className","onBeat","onEvent","onLineEnd","timer","React","tune","add_classes","staffwidth","abcjs","qpm","beatSubdivisions","beatCallback","lineEndCallback","eventCallback","event","note","JSON","id"],"mappings":"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","sourcesContent":["import React from 'react';\nimport abcjs from 'abcjs';\n\ntype Props = {\n  isPlaying?: boolean;\n  notation?: string;\n  bpm?: number;\n  scale?: number;\n  className?: string;\n  onBeat?: Function;\n  onEvent?: Function;\n  onLineEnd?: Function;\n};\n\nconst SheetMusic: React.FunctionComponent<Props> = ({\n  isPlaying,\n  notation,\n  bpm,\n  scale = 1,\n  className,\n  onBeat,\n  onEvent,\n  onLineEnd,\n}) => {\n  // const paper = React.useRef();\n  const timer = React.useRef<{\n    start: Function;\n    stop: Function;\n  }>();\n\n  if (!notation) {\n    return null;\n  }\n\n  React.useEffect(() => {\n    const tune = abcjs.renderAbc('paper', notation, {\n      add_classes: true,\n      scale,\n      staffwidth: 1200,\n    });\n\n    timer.current = new abcjs.TimingCallbacks(tune[0], {\n      qpm: bpm,\n      beatSubdivisions: 4,\n      beatCallback: (beatNumber, totalBeats, totalTime) => {\n        if (typeof onBeat === 'function') {\n          onBeat(beatNumber, totalBeats, totalTime);\n        }\n      },\n      lineEndCallback: info => {\n        if (typeof onLineEnd === 'function') {\n          onLineEnd(info);\n        }\n      },\n      eventCallback: event => {\n        if (typeof onEvent === 'function') {\n          if (event === null) {\n            onEvent(null);\n          } else {\n            // Event.midiPitches isn't working, so we need to work out pitch from ABC notation\n            // const note = notation[event.startChar];\n            const note = notation.slice(event.startChar, event.endChar);\n\n            onEvent({\n              ...event,\n              note,\n            });\n          }\n        }\n\n        if (!event) {\n          return null;\n        }\n\n        // const notes = document.getElementsByClassName('abcjs-note');\n        // const rests = document.getElementsByClassName('abcjs-rest');\n\n        // for (let note of notes) {\n        //   note.classList.remove('abcjs-note-playing');\n        // }\n\n        // for (let rest of rests) {\n        //   rest.classList.remove('abcjs-note-playing');\n        // }\n\n        // event.elements.forEach(element => {\n        //   element[0].classList.add('abcjs-note-playing');\n        // });\n\n        return null;\n      },\n    });\n    /* eslint-disable */\n  }, [JSON.stringify(notation)]);\n  /* eslint-enable */\n\n  React.useEffect(() => {\n    if (timer && timer.current) {\n      if (isPlaying) {\n        timer.current.start();\n      } else {\n        timer.current.stop();\n      }\n    }\n  }, [isPlaying]);\n\n  return (\n    <>\n      <div\n        id=\"paper\"\n        // ref={paper}\n        className={className || ''}\n      ></div>\n\n      <style>\n        {`\n          #paper .abcjs-note, #paper .abcjs-rest {\n            transition: 0.2s;\n          }\n\n          #paper .abcjs-note-playing {\n            fill: #d10fc9;\n          }\n        `}\n      </style>\n    </>\n  );\n};\n\nexport default SheetMusic;\n"]},"metadata":{},"sourceType":"module"}