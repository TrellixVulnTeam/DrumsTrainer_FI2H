{"ast":null,"code":"// Convert the input structure to a more useful structure where each item has a length of its own.\nvar instrumentIndexToName = require('./instrument-index-to-name');\n\nvar createNoteMap = function (sequence) {\n  var map = [];\n\n  for (var i = 0; i < sequence.tracks.length; i++) map.push([]); // TODO-PER: handle more than one note in a track\n\n\n  var nextNote = {};\n  var currentInstrument = instrumentIndexToName[0];\n  sequence.tracks.forEach(function (track, i) {\n    var currentTime = 0;\n    track.forEach(function (ev) {\n      switch (ev.cmd) {\n        case \"start\":\n          nextNote[ev.pitch] = {\n            time: currentTime,\n            instrument: currentInstrument,\n            volume: ev.volume\n          };\n          break;\n\n        case \"move\":\n          currentTime += ev.duration;\n          break;\n\n        case \"stop\":\n          map[i].push({\n            pitch: ev.pitch,\n            instrument: nextNote[ev.pitch].instrument,\n            start: nextNote[ev.pitch].time,\n            end: currentTime,\n            volume: nextNote[ev.pitch].volume\n          });\n          delete nextNote[ev.pitch];\n          break;\n\n        case \"program\":\n          currentInstrument = instrumentIndexToName[ev.instrument];\n          break;\n\n        default:\n          // TODO-PER: handle other event types\n          console.log(\"Unhanded midi event\", ev);\n      }\n    });\n  });\n  return map;\n};\n\nmodule.exports = createNoteMap;","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/node_modules/react-sheet-music/node_modules/abcjs/src/synth/create-note-map.js"],"names":["instrumentIndexToName","require","createNoteMap","sequence","map","i","tracks","length","push","nextNote","currentInstrument","forEach","track","currentTime","ev","cmd","pitch","time","instrument","volume","duration","start","end","console","log","module","exports"],"mappings":"AAAA;AAEA,IAAIA,qBAAqB,GAAGC,OAAO,CAAC,4BAAD,CAAnC;;AAEA,IAAIC,aAAa,GAAG,UAASC,QAAT,EAAmB;AACtC,MAAIC,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAAT,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EACCD,GAAG,CAACI,IAAJ,CAAS,EAAT,EAHqC,CAKtC;;;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,iBAAiB,GAAGV,qBAAqB,CAAC,CAAD,CAA7C;AACAG,EAAAA,QAAQ,CAACG,MAAT,CAAgBK,OAAhB,CAAwB,UAASC,KAAT,EAAgBP,CAAhB,EAAmB;AAC1C,QAAIQ,WAAW,GAAG,CAAlB;AACAD,IAAAA,KAAK,CAACD,OAAN,CAAc,UAASG,EAAT,EAAa;AAC1B,cAAQA,EAAE,CAACC,GAAX;AACC,aAAK,OAAL;AACCN,UAAAA,QAAQ,CAACK,EAAE,CAACE,KAAJ,CAAR,GAAqB;AAAEC,YAAAA,IAAI,EAAEJ,WAAR;AAAqBK,YAAAA,UAAU,EAAER,iBAAjC;AAAoDS,YAAAA,MAAM,EAAEL,EAAE,CAACK;AAA/D,WAArB;AACA;;AACD,aAAK,MAAL;AACCN,UAAAA,WAAW,IAAIC,EAAE,CAACM,QAAlB;AACA;;AACD,aAAK,MAAL;AACChB,UAAAA,GAAG,CAACC,CAAD,CAAH,CAAOG,IAAP,CAAY;AAACQ,YAAAA,KAAK,EAAEF,EAAE,CAACE,KAAX;AAAkBE,YAAAA,UAAU,EAAET,QAAQ,CAACK,EAAE,CAACE,KAAJ,CAAR,CAAmBE,UAAjD;AAA6DG,YAAAA,KAAK,EAAEZ,QAAQ,CAACK,EAAE,CAACE,KAAJ,CAAR,CAAmBC,IAAvF;AAA6FK,YAAAA,GAAG,EAAET,WAAlG;AAA+GM,YAAAA,MAAM,EAAEV,QAAQ,CAACK,EAAE,CAACE,KAAJ,CAAR,CAAmBG;AAA1I,WAAZ;AACA,iBAAOV,QAAQ,CAACK,EAAE,CAACE,KAAJ,CAAf;AACA;;AACD,aAAK,SAAL;AACCN,UAAAA,iBAAiB,GAAGV,qBAAqB,CAACc,EAAE,CAACI,UAAJ,CAAzC;AACA;;AACD;AACC;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCV,EAAnC;AAhBF;AAkBA,KAnBD;AAoBA,GAtBD;AAuBA,SAAOV,GAAP;AACA,CAhCD;;AAkCAqB,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["// Convert the input structure to a more useful structure where each item has a length of its own.\n\nvar instrumentIndexToName = require('./instrument-index-to-name');\n\nvar createNoteMap = function(sequence) {\n\tvar map = [];\n\tfor (var i = 0; i < sequence.tracks.length; i++)\n\t\tmap.push([]);\n\n\t// TODO-PER: handle more than one note in a track\n\tvar nextNote = {};\n\tvar currentInstrument = instrumentIndexToName[0];\n\tsequence.tracks.forEach(function(track, i) {\n\t\tvar currentTime = 0;\n\t\ttrack.forEach(function(ev) {\n\t\t\tswitch (ev.cmd) {\n\t\t\t\tcase \"start\":\n\t\t\t\t\tnextNote[ev.pitch] = { time: currentTime, instrument: currentInstrument, volume: ev.volume };\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"move\":\n\t\t\t\t\tcurrentTime += ev.duration;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"stop\":\n\t\t\t\t\tmap[i].push({pitch: ev.pitch, instrument: nextNote[ev.pitch].instrument, start: nextNote[ev.pitch].time, end: currentTime, volume: nextNote[ev.pitch].volume});\n\t\t\t\t\tdelete nextNote[ev.pitch];\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"program\":\n\t\t\t\t\tcurrentInstrument = instrumentIndexToName[ev.instrument];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO-PER: handle other event types\n\t\t\t\t\tconsole.log(\"Unhanded midi event\", ev);\n\t\t\t}\n\t\t});\n\t});\n\treturn map;\n};\n\nmodule.exports = createNoteMap;\n"]},"metadata":{},"sourceType":"script"}