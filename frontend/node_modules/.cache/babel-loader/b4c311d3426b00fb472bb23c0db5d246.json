{"ast":null,"code":"var _jsxFileName = \"/home/elad/Desktop/Repos/drums-trainer/frontend/src/components/Exercise/Metronome/Metronome.js\";\nimport s from \"./Metronome.module.scss\";\nimport React, { Component } from \"react\";\nimport Timer from \"./Timer.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addClicks = async () => {\n      const importRes1 = await import(\"../../../assets/metronome/logic_click1.mp3\"); // make sure the path is correct\n\n      this.click1 = new Audio(importRes1.default);\n      const importRes2 = await import(\"../../../assets/metronome/logic_click2.mp3\"); // make sure the path is correct\n\n      this.click2 = new Audio(importRes2.default);\n    };\n\n    this.playClick = () => {\n      if (this.state.count === this.state.timeSignature) {\n        this.setState({\n          count: 0\n        });\n      }\n\n      if (this.state.count === 0) {\n        this.click1.play();\n        this.click1.currentTime = 0;\n      } else {\n        this.click2.play();\n        this.click2.currentTime = 0;\n      }\n\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n\n    this.handleBpmIncreaseBpm = () => {\n      if (!this.state.isRunning) {\n        var jsonData = {\n          'user': this.props.exercise._id.$oid,\n          'tempo': this.state.tempo\n        };\n        this.setState({\n          tempo: this.state.tempo + 1\n        }, () => {\n          const url = '/increase-tempo';\n          this.updateMetronome();\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(jsonData)\n          }).then(() => {\n            console.log('bpm updated');\n          });\n        });\n      }\n    };\n\n    this.updateMetronome = () => {\n      this.metronome.timeInterval = 60000 / this.state.tempo;\n    };\n\n    this.handleBpmDecreaseBpm = () => {\n      if (!this.state.isRunning) {\n        var jsonData = {\n          'user': this.props.exercise._id.$oid,\n          'tempo': this.state.tempo\n        };\n        this.setState({\n          tempo: this.state.tempo - 1\n        }, () => {\n          this.updateMetronome();\n          fetch('/increase-tempo', {\n            method: 'POST',\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(jsonData)\n          }).then(() => {\n            console.log('bpm updated');\n          });\n        });\n      }\n    };\n\n    this.handleStartStop = () => {\n      if (this.state.isRunning) {\n        this.metronome.start();\n      } else {\n        this.metronome.stop();\n      }\n\n      this.setState({\n        isRunning: !this.state.isRunning\n      });\n      this.setState({\n        count: 0\n      });\n    };\n\n    this.getStartStopBtnClassName = () => {\n      return this.state.isRunning ? s.btn + ' ' + s.startStop + ' ' + s.enabledBtn : s.btn + ' ' + s.startStop + ' ' + s.disabledBtn;\n    };\n\n    this.getMetronomeClassName = () => {\n      return this.state.isRunning ? s.metronome + ' ' + s.metronomeExternalCircleDisabled : s.metronome + ' ' + s.metronomeExternalCircleEnabled;\n    };\n\n    this.getBpmValue = () => {\n      return !this.state.isRunning ? this.state.tempo : 'OFF';\n    };\n\n    this.getIncreaseSign = () => {\n      return this.state.isRunning ? '' : '+';\n    };\n\n    this.getDecreaseSign = () => {\n      return this.state.isRunning ? '' : '-';\n    };\n\n    this.state = {\n      count: 0,\n      tempo: props.exercise.tempo,\n      timeSignature: props.exercise.timeSignature,\n      isRunning: true\n    };\n    this.metronome = new Timer(this.playClick, 60000 / this.state.tempo, {\n      immediate: true\n    });\n    this.addClicks();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // console.log(prevProps);\n    // console.log(this.props);\n    // if (this.props.exercise._id.$oid !== prevProps.exercise._id.$oid) {\n    //   this.fetchData(this.props);\n    // }\n    // console.log(this.state.tempo);\n    this.setState({\n      timeSignature: nextProps.timeSignature\n    });\n    this.setState({\n      tempo: nextProps.exercise.tempo\n    }, () => this.updateMetronome());\n    console.log(this.state.tempo);\n  } // fetchData = (nextProps) => {\n  //   this.setState({ timeSignature: nextProps.timeSignature});\n  //   this.setState(\n  //     { tempo: nextProps.exercise.tempo },\n  //     () => this.updateMetronome()\n  //   );\n  //   console.log(this.state.tempo);\n  // };\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: this.getMetronomeClassName(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn increaseBtn\",\n          onClick: this.handleBpmIncreaseBpm,\n          children: this.getIncreaseSign()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: this.getStartStopBtnClassName(),\n          value: this.getBpmValue(),\n          onClick: this.handleStartStop,\n          children: this.state.tempo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn decreaseBtn\",\n          onClick: this.handleBpmDecreaseBpm,\n          children: this.getDecreaseSign()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Metronome;","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/src/components/Exercise/Metronome/Metronome.js"],"names":["s","React","Component","Timer","Metronome","constructor","props","addClicks","importRes1","click1","Audio","default","importRes2","click2","playClick","state","count","timeSignature","setState","play","currentTime","handleBpmIncreaseBpm","isRunning","jsonData","exercise","_id","$oid","tempo","url","updateMetronome","fetch","method","headers","body","JSON","stringify","then","console","log","metronome","timeInterval","handleBpmDecreaseBpm","handleStartStop","start","stop","getStartStopBtnClassName","btn","startStop","enabledBtn","disabledBtn","getMetronomeClassName","metronomeExternalCircleDisabled","metronomeExternalCircleEnabled","getBpmValue","getIncreaseSign","getDecreaseSign","immediate","componentWillReceiveProps","nextProps","render"],"mappings":";AAAA,OAAOA,CAAP,MAAc,yBAAd;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,YAAlB;;;AACA,MAAMC,SAAN,SAAwBF,SAAxB,CAAkC;AAChCG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAqCnBC,SArCmB,GAqCP,YAAY;AACtB,YAAMC,UAAU,GAAG,MAAM,OAAO,4CAAP,CAAzB,CADsB,CACyD;;AAC/E,WAAKC,MAAL,GAAc,IAAIC,KAAJ,CAAUF,UAAU,CAACG,OAArB,CAAd;AACA,YAAMC,UAAU,GAAG,MAAM,OAAO,4CAAP,CAAzB,CAHsB,CAGyD;;AAC/E,WAAKC,MAAL,GAAc,IAAIH,KAAJ,CAAUE,UAAU,CAACD,OAArB,CAAd;AACD,KA1CkB;;AAAA,SA2CnBG,SA3CmB,GA2CP,MAAM;AAChB,UAAI,KAAKC,KAAL,CAAWC,KAAX,KAAqB,KAAKD,KAAL,CAAWE,aAApC,EAAmD;AACjD,aAAKC,QAAL,CAAc;AAAEF,UAAAA,KAAK,EAAE;AAAT,SAAd;AACD;;AACD,UAAI,KAAKD,KAAL,CAAWC,KAAX,KAAqB,CAAzB,EAA4B;AAC1B,aAAKP,MAAL,CAAYU,IAAZ;AACA,aAAKV,MAAL,CAAYW,WAAZ,GAA0B,CAA1B;AACD,OAHD,MAGO;AACL,aAAKP,MAAL,CAAYM,IAAZ;AACA,aAAKN,MAAL,CAAYO,WAAZ,GAA0B,CAA1B;AACD;;AACD,WAAKF,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAvDkB;;AAAA,SAyDnBK,oBAzDmB,GAyDI,MAAM;AAC3B,UAAG,CAAC,KAAKN,KAAL,CAAWO,SAAf,EAA0B;AACxB,YAAIC,QAAQ,GAAG;AACb,kBAAQ,KAAKjB,KAAL,CAAWkB,QAAX,CAAoBC,GAApB,CAAwBC,IADnB;AAEb,mBAAS,KAAKX,KAAL,CAAWY;AAFP,SAAf;AAIA,aAAKT,QAAL,CACE;AAAES,UAAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWY,KAAX,GAAmB;AAA5B,SADF,EAEE,MAAM;AACJ,gBAAMC,GAAG,GAAG,iBAAZ;AACA,eAAKC,eAAL;AACAC,UAAAA,KAAK,CAACF,GAAD,EAAM;AACTG,YAAAA,MAAM,EAAE,MADC;AAETC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAFA;AAGTC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,QAAf;AAHG,WAAN,CAAL,CAIGa,IAJH,CAIQ,MAAM;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,WAND;AAOD,SAZH;AAcD;AACF,KA9EkB;;AAAA,SA+EnBT,eA/EmB,GA+ED,MAAM;AACtB,WAAKU,SAAL,CAAeC,YAAf,GAA8B,QAAQ,KAAKzB,KAAL,CAAWY,KAAjD;AACD,KAjFkB;;AAAA,SAkFnBc,oBAlFmB,GAkFI,MAAM;AAC3B,UAAG,CAAC,KAAK1B,KAAL,CAAWO,SAAf,EAA0B;AACxB,YAAIC,QAAQ,GAAG;AACb,kBAAQ,KAAKjB,KAAL,CAAWkB,QAAX,CAAoBC,GAApB,CAAwBC,IADnB;AAEb,mBAAS,KAAKX,KAAL,CAAWY;AAFP,SAAf;AAIA,aAAKT,QAAL,CACE;AAAES,UAAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWY,KAAX,GAAmB;AAA5B,SADF,EAEE,MAAM;AACJ,eAAKE,eAAL;AACAC,UAAAA,KAAK,CAAC,iBAAD,EAAoB;AACvBC,YAAAA,MAAM,EAAE,MADe;AAEvBC,YAAAA,OAAO,EAAE;AAAE,8BAAgB;AAAlB,aAFc;AAGvBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,QAAf;AAHiB,WAApB,CAAL,CAIGa,IAJH,CAIQ,MAAM;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,WAND;AAOD,SAXH;AAaD;AAEF,KAvGkB;;AAAA,SAwGnBI,eAxGmB,GAwGD,MAAM;AACtB,UAAI,KAAK3B,KAAL,CAAWO,SAAf,EAA0B;AACxB,aAAKiB,SAAL,CAAeI,KAAf;AACD,OAFD,MAEO;AACL,aAAKJ,SAAL,CAAeK,IAAf;AACD;;AACD,WAAK1B,QAAL,CAAc;AAAEI,QAAAA,SAAS,EAAE,CAAC,KAAKP,KAAL,CAAWO;AAAzB,OAAd;AACA,WAAKJ,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAAE;AAAT,OAAd;AACD,KAhHkB;;AAAA,SAiHnB6B,wBAjHmB,GAiHQ,MAAM;AAC/B,aAAO,KAAK9B,KAAL,CAAWO,SAAX,GACHtB,CAAC,CAAC8C,GAAF,GAAQ,GAAR,GAAc9C,CAAC,CAAC+C,SAAhB,GAA4B,GAA5B,GAAkC/C,CAAC,CAACgD,UADjC,GAEHhD,CAAC,CAAC8C,GAAF,GAAQ,GAAR,GAAc9C,CAAC,CAAC+C,SAAhB,GAA4B,GAA5B,GAAkC/C,CAAC,CAACiD,WAFxC;AAGD,KArHkB;;AAAA,SAuHnBC,qBAvHmB,GAuHK,MAAM;AAC5B,aAAO,KAAKnC,KAAL,CAAWO,SAAX,GACHtB,CAAC,CAACuC,SAAF,GAAc,GAAd,GAAoBvC,CAAC,CAACmD,+BADnB,GAEHnD,CAAC,CAACuC,SAAF,GAAc,GAAd,GAAoBvC,CAAC,CAACoD,8BAF1B;AAGD,KA3HkB;;AAAA,SA4HnBC,WA5HmB,GA4HL,MAAM;AAClB,aAAO,CAAC,KAAKtC,KAAL,CAAWO,SAAZ,GAAwB,KAAKP,KAAL,CAAWY,KAAnC,GAA2C,KAAlD;AACD,KA9HkB;;AAAA,SA+HnB2B,eA/HmB,GA+HD,MAAM;AACtB,aAAO,KAAKvC,KAAL,CAAWO,SAAX,GACL,EADK,GAEL,GAFF;AAGD,KAnIkB;;AAAA,SAoInBiC,eApImB,GAoID,MAAM;AACtB,aAAO,KAAKxC,KAAL,CAAWO,SAAX,GACL,EADK,GAEL,GAFF;AAGD,KAxIkB;;AAEjB,SAAKP,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,CADI;AAEXW,MAAAA,KAAK,EAAErB,KAAK,CAACkB,QAAN,CAAeG,KAFX;AAGXV,MAAAA,aAAa,EAAEX,KAAK,CAACkB,QAAN,CAAeP,aAHnB;AAIXK,MAAAA,SAAS,EAAE;AAJA,KAAb;AAMA,SAAKiB,SAAL,GAAiB,IAAIpC,KAAJ,CAAU,KAAKW,SAAf,EAA0B,QAAQ,KAAKC,KAAL,CAAWY,KAA7C,EAAoD;AACnE6B,MAAAA,SAAS,EAAE;AADwD,KAApD,CAAjB;AAGA,SAAKjD,SAAL;AACD;;AACDkD,EAAAA,yBAAyB,CAAEC,SAAF,EAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AAEA,SAAKxC,QAAL,CAAc;AAAED,MAAAA,aAAa,EAAEyC,SAAS,CAACzC;AAA3B,KAAd;AACA,SAAKC,QAAL,CACE;AAAES,MAAAA,KAAK,EAAE+B,SAAS,CAAClC,QAAV,CAAmBG;AAA5B,KADF,EAEE,MAAM,KAAKE,eAAL,EAFR;AAIAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKvB,KAAL,CAAWY,KAAvB;AAED,GA7B+B,CA8BhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAqGAgC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE;AAAK,QAAA,SAAS,EAAE,KAAKT,qBAAL,EAAhB;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,OAAO,EAAE,KAAK7B,oBAA/C;AAAA,oBACG,KAAKiC,eAAL;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE;AACE,UAAA,SAAS,EAAE,KAAKT,wBAAL,EADb;AAEE,UAAA,KAAK,EAAE,KAAKQ,WAAL,EAFT;AAGE,UAAA,OAAO,EAAE,KAAKX,eAHhB;AAAA,oBAKG,KAAK3B,KAAL,CAAWY;AALd;AAAA;AAAA;AAAA;AAAA,gBAJF,eAWE;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAiC,UAAA,OAAO,EAAE,KAAKc,oBAA/C;AAAA,oBACG,KAAKc,eAAL;AADH;AAAA;AAAA;AAAA;AAAA,gBAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AA9J+B;;AAiKlC,eAAenD,SAAf","sourcesContent":["import s from \"./Metronome.module.scss\";\nimport React, { Component } from \"react\";\nimport Timer from \"./Timer.js\";\nclass Metronome extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0,\n      tempo: props.exercise.tempo,\n      timeSignature: props.exercise.timeSignature,\n      isRunning: true\n    };\n    this.metronome = new Timer(this.playClick, 60000 / this.state.tempo, {\n      immediate: true\n    });\n    this.addClicks();\n  }\n  componentWillReceiveProps (nextProps) {\n    // console.log(prevProps);\n    // console.log(this.props);\n    // if (this.props.exercise._id.$oid !== prevProps.exercise._id.$oid) {\n    //   this.fetchData(this.props);\n    // }\n    // console.log(this.state.tempo);\n\n    this.setState({ timeSignature: nextProps.timeSignature});\n    this.setState(\n      { tempo: nextProps.exercise.tempo },\n      () => this.updateMetronome()\n    );\n    console.log(this.state.tempo);\n\n  }\n  // fetchData = (nextProps) => {\n  //   this.setState({ timeSignature: nextProps.timeSignature});\n  //   this.setState(\n  //     { tempo: nextProps.exercise.tempo },\n  //     () => this.updateMetronome()\n  //   );\n  //   console.log(this.state.tempo);\n  // };\n  addClicks = async () => {\n    const importRes1 = await import(\"../../../assets/metronome/logic_click1.mp3\"); // make sure the path is correct\n    this.click1 = new Audio(importRes1.default);\n    const importRes2 = await import(\"../../../assets/metronome/logic_click2.mp3\"); // make sure the path is correct\n    this.click2 = new Audio(importRes2.default);\n  };\n  playClick = () => {\n    if (this.state.count === this.state.timeSignature) {\n      this.setState({ count: 0 });\n    }\n    if (this.state.count === 0) {\n      this.click1.play();\n      this.click1.currentTime = 0;\n    } else {\n      this.click2.play();\n      this.click2.currentTime = 0;\n    }\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  handleBpmIncreaseBpm = () => {\n    if(!this.state.isRunning) {\n      var jsonData = {\n        'user': this.props.exercise._id.$oid,\n        'tempo': this.state.tempo\n      };\n      this.setState(\n        { tempo: this.state.tempo + 1 },\n        () => {\n          const url = '/increase-tempo';\n          this.updateMetronome();\n          fetch(url, {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(jsonData)\n          }).then(() => {\n            console.log('bpm updated')\n          })\n        }\n      );\n    }\n  };\n  updateMetronome = () => {\n    this.metronome.timeInterval = 60000 / this.state.tempo;\n  };\n  handleBpmDecreaseBpm = () => {\n    if(!this.state.isRunning) {\n      var jsonData = {\n        'user': this.props.exercise._id.$oid,\n        'tempo': this.state.tempo\n      };\n      this.setState(\n        { tempo: this.state.tempo - 1 },\n        () => {\n          this.updateMetronome();\n          fetch('/increase-tempo', {\n            method: 'POST',\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(jsonData)\n          }).then(() => {\n            console.log('bpm updated')\n          })\n        }\n      );  \n    }\n\n  };\n  handleStartStop = () => {\n    if (this.state.isRunning) {\n      this.metronome.start();\n    } else {\n      this.metronome.stop();\n    }\n    this.setState({ isRunning: !this.state.isRunning });\n    this.setState({ count: 0 });\n  };\n  getStartStopBtnClassName = () => {\n    return this.state.isRunning\n      ? s.btn + ' ' + s.startStop + ' ' + s.enabledBtn\n      : s.btn + ' ' + s.startStop + ' ' + s.disabledBtn;\n  };\n\n  getMetronomeClassName = () => {\n    return this.state.isRunning\n      ? s.metronome + ' ' + s.metronomeExternalCircleDisabled\n      : s.metronome + ' ' + s.metronomeExternalCircleEnabled;\n  };\n  getBpmValue = () => {\n    return !this.state.isRunning ? this.state.tempo : 'OFF';\n  };\n  getIncreaseSign = () => {\n    return this.state.isRunning\n    ? ''\n    : '+';\n  };\n  getDecreaseSign = () => {\n    return this.state.isRunning\n    ? ''\n    : '-';\n  };\n  render() { \n    return (\n      <div>\n        <div className={this.getMetronomeClassName()}>\n          <div className=\"btn increaseBtn\" onClick={this.handleBpmIncreaseBpm}>\n            {this.getIncreaseSign()}\n          </div>\n          <div\n            className={this.getStartStopBtnClassName()}\n            value={this.getBpmValue()}\n            onClick={this.handleStartStop}\n          >\n            {this.state.tempo}\n          </div>\n          <div className=\"btn decreaseBtn\" onClick={this.handleBpmDecreaseBpm}>\n            {this.getDecreaseSign()}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Metronome;\n"]},"metadata":{},"sourceType":"module"}