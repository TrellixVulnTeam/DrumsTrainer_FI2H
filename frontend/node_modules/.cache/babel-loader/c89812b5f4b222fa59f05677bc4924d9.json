{"ast":null,"code":"// Add accurate timer constructor function\nfunction Timer(callback, timeInterval, options) {\n  this.timeInterval = timeInterval; // Add method to start timer\n\n  this.start = () => {\n    // Set the expected time. The moment in time we start the timer plus whatever the time interval is. \n    this.expected = Date.now() + this.timeInterval; // Start the timeout and save the id in a property, so we can cancel it later\n\n    this.theTimeout = null;\n\n    if (options.immediate) {\n      callback();\n    }\n\n    this.timeout = setTimeout(this.round, this.timeInterval);\n    console.log('Timer Started');\n  }; // Add method to stop timer\n\n\n  this.stop = () => {\n    clearTimeout(this.timeout);\n    console.log('Timer Stopped');\n  }; // Round method that takes care of running the callback and adjusting the time\n\n\n  this.round = () => {\n    // console.log('timeout', this.timeout);\n    // The drift will be the current moment in time for this round minus the expected time..\n    let drift = Date.now() - this.expected; // Run error callback if drift is greater than time interval, and if the callback is provided\n\n    if (drift > this.timeInterval) {\n      // If error callback is provided\n      if (options.errorCallback) {\n        options.errorCallback();\n      }\n    }\n\n    callback(); // Increment expected time by time interval for every round after running the callback function.\n\n    this.expected += this.timeInterval; // console.log('Drift:', drift);\n    // console.log('Next round time interval:', this.timeInterval - drift);\n    // Run timeout again and set the timeInterval of the next iteration to the original time interval minus the drift.\n\n    this.timeout = setTimeout(this.round, this.timeInterval - drift);\n  };\n}\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/src/components/Exercise/Metronome/Timer.js"],"names":["Timer","callback","timeInterval","options","start","expected","Date","now","theTimeout","immediate","timeout","setTimeout","round","console","log","stop","clearTimeout","drift","errorCallback"],"mappings":"AAAA;AAEA,SAASA,KAAT,CAAeC,QAAf,EAAyBC,YAAzB,EAAuCC,OAAvC,EAAgD;AAC5C,OAAKD,YAAL,GAAoBA,YAApB,CAD4C,CAG5C;;AACA,OAAKE,KAAL,GAAa,MAAM;AACjB;AACA,SAAKC,QAAL,GAAgBC,IAAI,CAACC,GAAL,KAAa,KAAKL,YAAlC,CAFiB,CAGjB;;AACA,SAAKM,UAAL,GAAkB,IAAlB;;AAEA,QAAIL,OAAO,CAACM,SAAZ,EAAuB;AACrBR,MAAAA,QAAQ;AACT;;AAED,SAAKS,OAAL,GAAeC,UAAU,CAAC,KAAKC,KAAN,EAAa,KAAKV,YAAlB,CAAzB;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAZD,CAJ4C,CAiB5C;;;AACA,OAAKC,IAAL,GAAY,MAAM;AAEhBC,IAAAA,YAAY,CAAC,KAAKN,OAAN,CAAZ;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD,GAJD,CAlB4C,CAuB5C;;;AACA,OAAKF,KAAL,GAAa,MAAM;AACjB;AACA;AACA,QAAIK,KAAK,GAAGX,IAAI,CAACC,GAAL,KAAa,KAAKF,QAA9B,CAHiB,CAIjB;;AACA,QAAIY,KAAK,GAAG,KAAKf,YAAjB,EAA+B;AAC7B;AACA,UAAIC,OAAO,CAACe,aAAZ,EAA2B;AACzBf,QAAAA,OAAO,CAACe,aAAR;AACD;AACF;;AACDjB,IAAAA,QAAQ,GAXS,CAYjB;;AACA,SAAKI,QAAL,IAAiB,KAAKH,YAAtB,CAbiB,CAcjB;AACA;AACA;;AACA,SAAKQ,OAAL,GAAeC,UAAU,CAAC,KAAKC,KAAN,EAAa,KAAKV,YAAL,GAAoBe,KAAjC,CAAzB;AACD,GAlBD;AAmBD;;KA3CMjB,K;AA6CP,eAAeA,KAAf","sourcesContent":["// Add accurate timer constructor function\n\nfunction Timer(callback, timeInterval, options) {\n    this.timeInterval = timeInterval;\n    \n    // Add method to start timer\n    this.start = () => {\n      // Set the expected time. The moment in time we start the timer plus whatever the time interval is. \n      this.expected = Date.now() + this.timeInterval;\n      // Start the timeout and save the id in a property, so we can cancel it later\n      this.theTimeout = null;\n      \n      if (options.immediate) {\n        callback();\n      } \n      \n      this.timeout = setTimeout(this.round, this.timeInterval);\n      console.log('Timer Started');\n    }\n    // Add method to stop timer\n    this.stop = () => {\n  \n      clearTimeout(this.timeout);\n      console.log('Timer Stopped');\n    }\n    // Round method that takes care of running the callback and adjusting the time\n    this.round = () => {\n      // console.log('timeout', this.timeout);\n      // The drift will be the current moment in time for this round minus the expected time..\n      let drift = Date.now() - this.expected;\n      // Run error callback if drift is greater than time interval, and if the callback is provided\n      if (drift > this.timeInterval) {\n        // If error callback is provided\n        if (options.errorCallback) {\n          options.errorCallback();\n        }\n      }\n      callback();\n      // Increment expected time by time interval for every round after running the callback function.\n      this.expected += this.timeInterval;\n      // console.log('Drift:', drift);\n      // console.log('Next round time interval:', this.timeInterval - drift);\n      // Run timeout again and set the timeInterval of the next iteration to the original time interval minus the drift.\n      this.timeout = setTimeout(this.round, this.timeInterval - drift);\n    }\n  }\n\n  export default Timer;"]},"metadata":{},"sourceType":"module"}