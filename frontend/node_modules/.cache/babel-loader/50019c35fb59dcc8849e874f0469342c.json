{"ast":null,"code":"// Load one mp3 file for one note.\n// url = the base url for the soundfont\n// instrument = the instrument name (e.g. \"acoustic_grand_piano\")\n// name = the pitch name (e.g. \"A3\")\nvar soundsCache = require('./sounds-cache');\n\nvar getNote = function (url, instrument, name, audioContext) {\n  return new Promise(function (resolve, reject) {\n    if (!soundsCache[instrument]) soundsCache[instrument] = {};\n    var instrumentCache = soundsCache[instrument];\n\n    if (instrumentCache[name] === 'error') {\n      return reject(new Error(\"Unable to load sound font\" + ' ' + url + ' ' + instrument + ' ' + name));\n    }\n\n    if (instrumentCache[name]) {\n      return resolve({\n        instrument: instrument,\n        name: name\n      });\n    } // if (this.debugCallback)\n    // \tthis.debugCallback(`Loading sound: ${instrument} ${name}`);\n\n\n    instrumentCache[name] = \"pending\"; // This can be called in parallel, so don't call it a second time before the first one has loaded.\n\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url + instrument + '-mp3/' + name + '.mp3', true);\n    xhr.responseType = 'arraybuffer';\n    var self = this;\n\n    function onSuccess(audioBuffer) {\n      instrumentCache[name] = audioBuffer; // if (self.debugCallback)\n      // \tself.debugCallback(`Sound loaded: ${instrument} ${name} ${url}`);\n\n      resolve({\n        instrument: instrument,\n        name: name\n      });\n    }\n\n    function onFailure(error) {\n      if (self.debugCallback) self.debugCallback(error);\n      console.log(error);\n      reject(error);\n    }\n\n    xhr.onload = function (e) {\n      if (this.status === 200) {\n        audioContext.decodeAudioData(this.response, onSuccess, onFailure); //.then(function() {\n        // \treturn resolve({instrument: instrument, name: name});\n        // }).catch(function(error) {\n        // \treturn reject(new Error(cantLoadMp3 + error));\n        // });\n      } else {\n        instrumentCache[name] = \"error\"; // To keep this from trying to load repeatedly.\n\n        var cantLoadMp3 = \"Onload error loading sound: \" + name + \" \" + url + \" \" + e.currentTarget.status + \" \" + e.currentTarget.statusText;\n        if (self.debugCallback) self.debugCallback(cantLoadMp3);\n        return reject(new Error(cantLoadMp3));\n      }\n    };\n\n    xhr.addEventListener(\"error\", function () {\n      instrumentCache[name] = \"error\"; // To keep this from trying to load repeatedly.\n\n      var cantLoadMp3 = \"Error in loading sound: \" + \" \" + url;\n      if (self.debugCallback) self.debugCallback(cantLoadMp3);\n      return reject(new Error(cantLoadMp3));\n    }, false);\n    xhr.send();\n  });\n};\n\nmodule.exports = getNote;","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/node_modules/react-sheet-music/node_modules/abcjs/src/synth/load-note.js"],"names":["soundsCache","require","getNote","url","instrument","name","audioContext","Promise","resolve","reject","instrumentCache","Error","xhr","XMLHttpRequest","open","responseType","self","onSuccess","audioBuffer","onFailure","error","debugCallback","console","log","onload","e","status","decodeAudioData","response","cantLoadMp3","currentTarget","statusText","addEventListener","send","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;;AAEA,IAAIC,OAAO,GAAG,UAASC,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,YAAhC,EAA8C;AAC3D,SAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC7C,QAAI,CAACT,WAAW,CAACI,UAAD,CAAhB,EACCJ,WAAW,CAACI,UAAD,CAAX,GAA0B,EAA1B;AACD,QAAIM,eAAe,GAAGV,WAAW,CAACI,UAAD,CAAjC;;AAEA,QAAIM,eAAe,CAACL,IAAD,CAAf,KAA0B,OAA9B,EAAuC;AACtC,aAAOI,MAAM,CAAC,IAAIE,KAAJ,CAAU,8BAA8B,GAA9B,GAAoCR,GAApC,GAA0C,GAA1C,GAAgDC,UAAhD,GAA6D,GAA7D,GAAmEC,IAA7E,CAAD,CAAb;AACA;;AACD,QAAIK,eAAe,CAACL,IAAD,CAAnB,EAA2B;AAC1B,aAAOG,OAAO,CAAC;AAACJ,QAAAA,UAAU,EAAEA,UAAb;AAAyBC,QAAAA,IAAI,EAAEA;AAA/B,OAAD,CAAd;AACA,KAV4C,CAY7C;AACA;;;AACAK,IAAAA,eAAe,CAACL,IAAD,CAAf,GAAwB,SAAxB,CAd6C,CAcV;;AACnC,QAAIO,GAAG,GAAG,IAAIC,cAAJ,EAAV;AACAD,IAAAA,GAAG,CAACE,IAAJ,CAAS,KAAT,EAAgBX,GAAG,GAACC,UAAJ,GAAe,OAAf,GAAuBC,IAAvB,GAA4B,MAA5C,EAAoD,IAApD;AACAO,IAAAA,GAAG,CAACG,YAAJ,GAAmB,aAAnB;AAEA,QAAIC,IAAI,GAAG,IAAX;;AACA,aAASC,SAAT,CAAmBC,WAAnB,EAAgC;AAC/BR,MAAAA,eAAe,CAACL,IAAD,CAAf,GAAwBa,WAAxB,CAD+B,CAE/B;AACA;;AACAV,MAAAA,OAAO,CAAC;AAACJ,QAAAA,UAAU,EAAEA,UAAb;AAAyBC,QAAAA,IAAI,EAAEA;AAA/B,OAAD,CAAP;AACA;;AAED,aAASc,SAAT,CAAmBC,KAAnB,EAA0B;AACzB,UAAIJ,IAAI,CAACK,aAAT,EACCL,IAAI,CAACK,aAAL,CAAmBD,KAAnB;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACAX,MAAAA,MAAM,CAACW,KAAD,CAAN;AACA;;AAEDR,IAAAA,GAAG,CAACY,MAAJ,GAAa,UAAUC,CAAV,EAAa;AACzB,UAAI,KAAKC,MAAL,KAAgB,GAApB,EAAyB;AACxBpB,QAAAA,YAAY,CAACqB,eAAb,CAA6B,KAAKC,QAAlC,EAA4CX,SAA5C,EAAuDE,SAAvD,EADwB,CAC0C;AAClE;AACA;AACA;AACA;AACA,OAND,MAMO;AACNT,QAAAA,eAAe,CAACL,IAAD,CAAf,GAAwB,OAAxB,CADM,CAC2B;;AACjC,YAAIwB,WAAW,GAAG,iCAAkCxB,IAAlC,GAAyC,GAAzC,GAA+CF,GAA/C,GAAqD,GAArD,GAA2DsB,CAAC,CAACK,aAAF,CAAgBJ,MAA3E,GAAoF,GAApF,GAA0FD,CAAC,CAACK,aAAF,CAAgBC,UAA5H;AACA,YAAIf,IAAI,CAACK,aAAT,EACCL,IAAI,CAACK,aAAL,CAAmBQ,WAAnB;AACD,eAAOpB,MAAM,CAAC,IAAIE,KAAJ,CAAUkB,WAAV,CAAD,CAAb;AACA;AACD,KAdD;;AAeAjB,IAAAA,GAAG,CAACoB,gBAAJ,CAAqB,OAArB,EAA8B,YAAY;AACzCtB,MAAAA,eAAe,CAACL,IAAD,CAAf,GAAwB,OAAxB,CADyC,CACR;;AACjC,UAAIwB,WAAW,GAAG,6BAA6B,GAA7B,GAAmC1B,GAArD;AACA,UAAIa,IAAI,CAACK,aAAT,EACCL,IAAI,CAACK,aAAL,CAAmBQ,WAAnB;AACD,aAAOpB,MAAM,CAAC,IAAIE,KAAJ,CAAUkB,WAAV,CAAD,CAAb;AACA,KAND,EAMG,KANH;AAOAjB,IAAAA,GAAG,CAACqB,IAAJ;AACA,GAzDM,CAAP;AA0DA,CA3DD;;AA6DAC,MAAM,CAACC,OAAP,GAAiBjC,OAAjB","sourcesContent":["// Load one mp3 file for one note.\n// url = the base url for the soundfont\n// instrument = the instrument name (e.g. \"acoustic_grand_piano\")\n// name = the pitch name (e.g. \"A3\")\nvar soundsCache = require('./sounds-cache');\n\nvar getNote = function(url, instrument, name, audioContext) {\n\treturn new Promise(function (resolve, reject) {\n\t\tif (!soundsCache[instrument])\n\t\t\tsoundsCache[instrument] = {};\n\t\tvar instrumentCache = soundsCache[instrument];\n\n\t\tif (instrumentCache[name] === 'error') {\n\t\t\treturn reject(new Error(\"Unable to load sound font\" + ' ' + url + ' ' + instrument + ' ' + name));\n\t\t}\n\t\tif (instrumentCache[name]) {\n\t\t\treturn resolve({instrument: instrument, name: name});\n\t\t}\n\n\t\t// if (this.debugCallback)\n\t\t// \tthis.debugCallback(`Loading sound: ${instrument} ${name}`);\n\t\tinstrumentCache[name] = \"pending\"; // This can be called in parallel, so don't call it a second time before the first one has loaded.\n\t\tvar xhr = new XMLHttpRequest();\n\t\txhr.open('GET', url+instrument+'-mp3/'+name+'.mp3', true);\n\t\txhr.responseType = 'arraybuffer';\n\n\t\tvar self = this;\n\t\tfunction onSuccess(audioBuffer) {\n\t\t\tinstrumentCache[name] = audioBuffer;\n\t\t\t// if (self.debugCallback)\n\t\t\t// \tself.debugCallback(`Sound loaded: ${instrument} ${name} ${url}`);\n\t\t\tresolve({instrument: instrument, name: name});\n\t\t}\n\n\t\tfunction onFailure(error) {\n\t\t\tif (self.debugCallback)\n\t\t\t\tself.debugCallback(error);\n\t\t\tconsole.log(error);\n\t\t\treject(error);\n\t\t}\n\n\t\txhr.onload = function (e) {\n\t\t\tif (this.status === 200) {\n\t\t\t\taudioContext.decodeAudioData(this.response, onSuccess, onFailure);//.then(function() {\n\t\t\t\t// \treturn resolve({instrument: instrument, name: name});\n\t\t\t\t// }).catch(function(error) {\n\t\t\t\t// \treturn reject(new Error(cantLoadMp3 + error));\n\t\t\t\t// });\n\t\t\t} else {\n\t\t\t\tinstrumentCache[name] = \"error\"; // To keep this from trying to load repeatedly.\n\t\t\t\tvar cantLoadMp3 = \"Onload error loading sound: \" +  name + \" \" + url + \" \" + e.currentTarget.status + \" \" + e.currentTarget.statusText;\n\t\t\t\tif (self.debugCallback)\n\t\t\t\t\tself.debugCallback(cantLoadMp3);\n\t\t\t\treturn reject(new Error(cantLoadMp3));\n\t\t\t}\n\t\t};\n\t\txhr.addEventListener(\"error\", function () {\n\t\t\tinstrumentCache[name] = \"error\"; // To keep this from trying to load repeatedly.\n\t\t\tvar cantLoadMp3 = \"Error in loading sound: \" + \" \" + url;\n\t\t\tif (self.debugCallback)\n\t\t\t\tself.debugCallback(cantLoadMp3);\n\t\t\treturn reject(new Error(cantLoadMp3));\n\t\t}, false);\n\t\txhr.send();\n\t});\n};\n\nmodule.exports = getNote;\n"]},"metadata":{},"sourceType":"script"}