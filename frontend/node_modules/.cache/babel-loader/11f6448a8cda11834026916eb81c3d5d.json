{"ast":null,"code":"/*global window */\nvar parseCommon = require('./abc_common');\n\nvar parseDirective = {};\n\n(function () {\n  \"use strict\";\n\n  var tokenizer;\n  var warn;\n  var multilineVars;\n  var tune;\n\n  parseDirective.initialize = function (tokenizer_, warn_, multilineVars_, tune_) {\n    tokenizer = tokenizer_;\n    warn = warn_;\n    multilineVars = multilineVars_;\n    tune = tune_;\n    initializeFonts();\n  };\n\n  function initializeFonts() {\n    multilineVars.annotationfont = {\n      face: \"Helvetica\",\n      size: 12,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.gchordfont = {\n      face: \"Helvetica\",\n      size: 12,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.historyfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 16,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.infofont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 14,\n      weight: \"normal\",\n      style: \"italic\",\n      decoration: \"none\"\n    };\n    multilineVars.measurefont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 14,\n      weight: \"normal\",\n      style: \"italic\",\n      decoration: \"none\"\n    };\n    multilineVars.partsfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 15,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.repeatfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 13,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.textfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 16,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.tripletfont = {\n      face: \"Times\",\n      size: 11,\n      weight: \"normal\",\n      style: \"italic\",\n      decoration: \"none\"\n    };\n    multilineVars.vocalfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 13,\n      weight: \"bold\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    multilineVars.wordsfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 16,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    }; // These fonts are global for the entire tune.\n\n    tune.formatting.composerfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 14,\n      weight: \"normal\",\n      style: \"italic\",\n      decoration: \"none\"\n    };\n    tune.formatting.subtitlefont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 16,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    tune.formatting.tempofont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 15,\n      weight: \"bold\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    tune.formatting.titlefont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 20,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    tune.formatting.footerfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 12,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    tune.formatting.headerfont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 12,\n      weight: \"normal\",\n      style: \"normal\",\n      decoration: \"none\"\n    };\n    tune.formatting.voicefont = {\n      face: \"\\\"Times New Roman\\\"\",\n      size: 13,\n      weight: \"bold\",\n      style: \"normal\",\n      decoration: \"none\"\n    }; // these are the default fonts for these element types. In the printer, these fonts might change as the tune progresses.\n\n    tune.formatting.annotationfont = multilineVars.annotationfont;\n    tune.formatting.gchordfont = multilineVars.gchordfont;\n    tune.formatting.historyfont = multilineVars.historyfont;\n    tune.formatting.infofont = multilineVars.infofont;\n    tune.formatting.measurefont = multilineVars.measurefont;\n    tune.formatting.partsfont = multilineVars.partsfont;\n    tune.formatting.repeatfont = multilineVars.repeatfont;\n    tune.formatting.textfont = multilineVars.textfont;\n    tune.formatting.tripletfont = multilineVars.tripletfont;\n    tune.formatting.vocalfont = multilineVars.vocalfont;\n    tune.formatting.wordsfont = multilineVars.wordsfont;\n  }\n\n  var fontTypeCanHaveBox = {\n    gchordfont: true,\n    measurefont: true,\n    partsfont: true\n  };\n\n  var fontTranslation = function (fontFace) {\n    // This translates Postscript fonts for a web alternative.\n    // Note that the postscript fonts contain italic and bold info in them, so what is returned is a hash.\n    switch (fontFace) {\n      case \"Arial-Italic\":\n        return {\n          face: \"Arial\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Arial-Bold\":\n        return {\n          face: \"Arial\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Bookman-Demi\":\n        return {\n          face: \"Bookman,serif\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Bookman-DemiItalic\":\n        return {\n          face: \"Bookman,serif\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Bookman-Light\":\n        return {\n          face: \"Bookman,serif\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Bookman-LightItalic\":\n        return {\n          face: \"Bookman,serif\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Courier\":\n        return {\n          face: \"\\\"Courier New\\\"\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Courier-Oblique\":\n        return {\n          face: \"\\\"Courier New\\\"\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Courier-Bold\":\n        return {\n          face: \"\\\"Courier New\\\"\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Courier-BoldOblique\":\n        return {\n          face: \"\\\"Courier New\\\"\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"AvantGarde-Book\":\n        return {\n          face: \"AvantGarde,Arial\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"AvantGarde-BookOblique\":\n        return {\n          face: \"AvantGarde,Arial\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"AvantGarde-Demi\":\n      case \"Avant-Garde-Demi\":\n        return {\n          face: \"AvantGarde,Arial\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"AvantGarde-DemiOblique\":\n        return {\n          face: \"AvantGarde,Arial\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Oblique\":\n        return {\n          face: \"Helvetica\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Bold\":\n        return {\n          face: \"Helvetica\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-BoldOblique\":\n        return {\n          face: \"Helvetica\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Narrow\":\n        return {\n          face: \"\\\"Helvetica Narrow\\\",Helvetica\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Narrow-Oblique\":\n        return {\n          face: \"\\\"Helvetica Narrow\\\",Helvetica\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Narrow-Bold\":\n        return {\n          face: \"\\\"Helvetica Narrow\\\",Helvetica\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Helvetica-Narrow-BoldOblique\":\n        return {\n          face: \"\\\"Helvetica Narrow\\\",Helvetica\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Palatino-Roman\":\n        return {\n          face: \"Palatino\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Palatino-Italic\":\n        return {\n          face: \"Palatino\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Palatino-Bold\":\n        return {\n          face: \"Palatino\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Palatino-BoldItalic\":\n        return {\n          face: \"Palatino\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"NewCenturySchlbk-Roman\":\n        return {\n          face: \"\\\"New Century\\\",serif\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"NewCenturySchlbk-Italic\":\n        return {\n          face: \"\\\"New Century\\\",serif\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"NewCenturySchlbk-Bold\":\n        return {\n          face: \"\\\"New Century\\\",serif\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"NewCenturySchlbk-BoldItalic\":\n        return {\n          face: \"\\\"New Century\\\",serif\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Times\":\n      case \"Times-Roman\":\n      case \"Times-Narrow\":\n      case \"Times-Courier\":\n      case \"Times-New-Roman\":\n        return {\n          face: \"\\\"Times New Roman\\\"\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Times-Italic\":\n      case \"Times-Italics\":\n        return {\n          face: \"\\\"Times New Roman\\\"\",\n          weight: \"normal\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"Times-Bold\":\n        return {\n          face: \"\\\"Times New Roman\\\"\",\n          weight: \"bold\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      case \"Times-BoldItalic\":\n        return {\n          face: \"\\\"Times New Roman\\\"\",\n          weight: \"bold\",\n          style: \"italic\",\n          decoration: \"none\"\n        };\n\n      case \"ZapfChancery-MediumItalic\":\n        return {\n          face: \"\\\"Zapf Chancery\\\",cursive,serif\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\"\n        };\n\n      default:\n        return null;\n    }\n  };\n\n  var getFontParameter = function (tokens, currentSetting, str, position, cmd) {\n    // Every font parameter has the following format:\n    // <face> <utf8> <size> <modifiers> <box>\n    // Where:\n    // face: either a standard web font name, or a postscript font, enumerated in fontTranslation. This could also be an * or be missing if the face shouldn't change.\n    // utf8: This is optional, and specifies utf8. That's all that is supported so the field is just silently ignored.\n    // size: The size, in pixels. This may be omitted if the size is not changing.\n    // modifiers: zero or more of \"bold\", \"italic\", \"underline\"\n    // box: Only applies to the measure numbers, gchords, and the parts. If present, then a box is drawn around the characters.\n    // If face is present, then all the modifiers are cleared. If face is absent, then the modifiers are illegal.\n    // The face can be a single word, a set of words separated by hyphens, or a quoted string.\n    //\n    // So, in practicality, there are three types of font definitions: a number only, an asterisk and a number only, or the full definition (with an optional size).\n    function processNumberOnly() {\n      var size = parseInt(tokens[0].token);\n      tokens.shift();\n\n      if (!currentSetting) {\n        warn(\"Can't set just the size of the font since there is no default value.\", str, position);\n        return {\n          face: \"\\\"Times New Roman\\\"\",\n          weight: \"normal\",\n          style: \"normal\",\n          decoration: \"none\",\n          size: size\n        };\n      }\n\n      if (tokens.length === 0) {\n        return {\n          face: currentSetting.face,\n          weight: currentSetting.weight,\n          style: currentSetting.style,\n          decoration: currentSetting.decoration,\n          size: size\n        };\n      }\n\n      if (tokens.length === 1 && tokens[0].token === \"box\" && fontTypeCanHaveBox[cmd]) return {\n        face: currentSetting.face,\n        weight: currentSetting.weight,\n        style: currentSetting.style,\n        decoration: currentSetting.decoration,\n        size: size,\n        box: true\n      };\n      warn(\"Extra parameters in font definition.\", str, position);\n      return {\n        face: currentSetting.face,\n        weight: currentSetting.weight,\n        style: currentSetting.style,\n        decoration: currentSetting.decoration,\n        size: size\n      };\n    } // format 1: asterisk and number only\n\n\n    if (tokens[0].token === '*') {\n      tokens.shift();\n      if (tokens[0].type === 'number') return processNumberOnly();else {\n        warn(\"Expected font size number after *.\", str, position);\n      }\n    } // format 2: number only\n\n\n    if (tokens[0].type === 'number') {\n      return processNumberOnly();\n    } // format 3: whole definition\n\n\n    var face = [];\n    var size;\n    var weight = \"normal\";\n    var style = \"normal\";\n    var decoration = \"none\";\n    var box = false;\n    var state = 'face';\n    var hyphenLast = false;\n\n    while (tokens.length) {\n      var currToken = tokens.shift();\n      var word = currToken.token.toLowerCase();\n\n      switch (state) {\n        case 'face':\n          if (hyphenLast || word !== 'utf' && currToken.type !== 'number' && word !== \"bold\" && word !== \"italic\" && word !== \"underline\" && word !== \"box\") {\n            if (face.length > 0 && currToken.token === '-') {\n              hyphenLast = true;\n              face[face.length - 1] = face[face.length - 1] + currToken.token;\n            } else {\n              if (hyphenLast) {\n                hyphenLast = false;\n                face[face.length - 1] = face[face.length - 1] + currToken.token;\n              } else face.push(currToken.token);\n            }\n          } else {\n            if (currToken.type === 'number') {\n              if (size) {\n                warn(\"Font size specified twice in font definition.\", str, position);\n              } else {\n                size = currToken.token;\n              }\n\n              state = 'modifier';\n            } else if (word === \"bold\") weight = \"bold\";else if (word === \"italic\") style = \"italic\";else if (word === \"underline\") decoration = \"underline\";else if (word === \"box\") {\n              if (fontTypeCanHaveBox[cmd]) box = true;else warn(\"This font style doesn't support \\\"box\\\"\", str, position);\n              state = \"finished\";\n            } else if (word === \"utf\") {\n              currToken = tokens.shift(); // this gets rid of the \"8\" after \"utf\"\n\n              state = \"size\";\n            } else warn(\"Unknown parameter \" + currToken.token + \" in font definition.\", str, position);\n          }\n\n          break;\n\n        case \"size\":\n          if (currToken.type === 'number') {\n            if (size) {\n              warn(\"Font size specified twice in font definition.\", str, position);\n            } else {\n              size = currToken.token;\n            }\n          } else {\n            warn(\"Expected font size in font definition.\", str, position);\n          }\n\n          state = 'modifier';\n          break;\n\n        case \"modifier\":\n          if (word === \"bold\") weight = \"bold\";else if (word === \"italic\") style = \"italic\";else if (word === \"underline\") decoration = \"underline\";else if (word === \"box\") {\n            if (fontTypeCanHaveBox[cmd]) box = true;else warn(\"This font style doesn't support \\\"box\\\"\", str, position);\n            state = \"finished\";\n          } else warn(\"Unknown parameter \" + currToken.token + \" in font definition.\", str, position);\n          break;\n\n        case \"finished\":\n          warn(\"Extra characters found after \\\"box\\\" in font definition.\", str, position);\n          break;\n      }\n    }\n\n    if (size === undefined) {\n      if (!currentSetting) {\n        warn(\"Must specify the size of the font since there is no default value.\", str, position);\n        size = 12;\n      } else size = currentSetting.size;\n    } else size = parseFloat(size);\n\n    face = face.join(' ');\n    var psFont = fontTranslation(face);\n    var font = {};\n\n    if (psFont) {\n      font.face = psFont.face;\n      font.weight = psFont.weight;\n      font.style = psFont.style;\n      font.decoration = psFont.decoration;\n      font.size = size;\n      if (box) font.box = true;\n      return font;\n    }\n\n    font.face = face;\n    font.weight = weight;\n    font.style = style;\n    font.decoration = decoration;\n    font.size = size;\n    if (box) font.box = true;\n    return font;\n  };\n\n  var getChangingFont = function (cmd, tokens, str) {\n    if (tokens.length === 0) return \"Directive \\\"\" + cmd + \"\\\" requires a font as a parameter.\";\n    multilineVars[cmd] = getFontParameter(tokens, multilineVars[cmd], str, 0, cmd);\n    if (multilineVars.is_in_header) // If the font appears in the header, then it becomes the default font.\n      tune.formatting[cmd] = multilineVars[cmd];\n    return null;\n  };\n\n  var getGlobalFont = function (cmd, tokens, str) {\n    if (tokens.length === 0) return \"Directive \\\"\" + cmd + \"\\\" requires a font as a parameter.\";\n    tune.formatting[cmd] = getFontParameter(tokens, tune.formatting[cmd], str, 0, cmd);\n    return null;\n  };\n\n  var setScale = function (cmd, tokens) {\n    var scratch = \"\";\n    parseCommon.each(tokens, function (tok) {\n      scratch += tok.token;\n    });\n    var num = parseFloat(scratch);\n    if (isNaN(num) || num === 0) return \"Directive \\\"\" + cmd + \"\\\" requires a number as a parameter.\";\n    tune.formatting.scale = num;\n  };\n\n  var getRequiredMeasurement = function (cmd, tokens) {\n    var points = tokenizer.getMeasurement(tokens);\n    if (points.used === 0 || tokens.length !== 0) return {\n      error: \"Directive \\\"\" + cmd + \"\\\" requires a measurement as a parameter.\"\n    };\n    return points.value;\n  };\n\n  var oneParameterMeasurement = function (cmd, tokens) {\n    var points = tokenizer.getMeasurement(tokens);\n    if (points.used === 0 || tokens.length !== 0) return \"Directive \\\"\" + cmd + \"\\\" requires a measurement as a parameter.\";\n    tune.formatting[cmd] = points.value;\n    return null;\n  };\n\n  var addMultilineVar = function (key, cmd, tokens, min, max) {\n    if (tokens.length !== 1 || tokens[0].type !== 'number') return \"Directive \\\"\" + cmd + \"\\\" requires a number as a parameter.\";\n    var i = tokens[0].intt;\n    if (min !== undefined && i < min) return \"Directive \\\"\" + cmd + \"\\\" requires a number greater than or equal to \" + min + \" as a parameter.\";\n    if (max !== undefined && i > max) return \"Directive \\\"\" + cmd + \"\\\" requires a number less than or equal to \" + max + \" as a parameter.\";\n    multilineVars[key] = i;\n    return null;\n  };\n\n  var addMultilineVarBool = function (key, cmd, tokens) {\n    if (tokens.length === 1 && (tokens[0].token === 'true' || tokens[0].token === 'false')) {\n      multilineVars[key] = tokens[0].token === 'true';\n      return null;\n    }\n\n    var str = addMultilineVar(key, cmd, tokens, 0, 1);\n    if (str !== null) return str;\n    multilineVars[key] = multilineVars[key] === 1;\n    return null;\n  };\n\n  var addMultilineVarOneParamChoice = function (key, cmd, tokens, choices) {\n    if (tokens.length !== 1) return \"Directive \\\"\" + cmd + \"\\\" requires one of [ \" + choices.join(\", \") + \" ] as a parameter.\";\n    var choice = tokens[0].token;\n    var found = false;\n\n    for (var i = 0; !found && i < choices.length; i++) {\n      if (choices[i] === choice) found = true;\n    }\n\n    if (!found) return \"Directive \\\"\" + cmd + \"\\\" requires one of [ \" + choices.join(\", \") + \" ] as a parameter.\";\n    multilineVars[key] = choice;\n    return null;\n  };\n\n  var midiCmdParam0 = [\"nobarlines\", \"barlines\", \"beataccents\", \"nobeataccents\", \"droneon\", \"droneoff\", \"drumon\", \"drumoff\", \"fermatafixed\", \"fermataproportional\", \"gchordon\", \"gchordoff\", \"controlcombo\", \"temperamentnormal\", \"noportamento\"];\n  var midiCmdParam1String = [\"gchord\", \"ptstress\", \"beatstring\"];\n  var midiCmdParam1Integer = [\"bassvol\", \"chordvol\", \"c\", \"channel\", \"beatmod\", \"deltaloudness\", \"drumbars\", \"gracedivider\", \"makechordchannels\", \"randomchordattack\", \"chordattack\", \"stressmodel\", \"transpose\", \"rtranspose\", \"vol\", \"volinc\"];\n  var midiCmdParam1Integer1OptionalInteger = [\"program\"];\n  var midiCmdParam2Integer = [\"ratio\", \"snt\", \"bendvelocity\", \"pitchbend\", \"control\", \"temperamentlinear\"];\n  var midiCmdParam4Integer = [\"beat\"];\n  var midiCmdParam5Integer = [\"drone\"];\n  var midiCmdParam1IntegerOptionalOctave = [\"bassprog\", \"chordprog\"];\n  var midiCmdParam1String1Integer = [\"portamento\"];\n  var midiCmdParamFraction = [\"expand\", \"grace\", \"trim\"];\n  var midiCmdParam1StringVariableIntegers = [\"drum\", \"chordname\"];\n\n  var parseMidiCommand = function (midi, tune, restOfString) {\n    var midi_cmd = midi.shift().token;\n    var midi_params = [];\n\n    if (midiCmdParam0.indexOf(midi_cmd) >= 0) {\n      // NO PARAMETERS\n      if (midi.length !== 0) warn(\"Unexpected parameter in MIDI \" + midi_cmd, restOfString, 0);\n    } else if (midiCmdParam1String.indexOf(midi_cmd) >= 0) {\n      // ONE STRING PARAMETER\n      if (midi.length !== 1) warn(\"Expected one parameter in MIDI \" + midi_cmd, restOfString, 0);else midi_params.push(midi[0].token);\n    } else if (midiCmdParam1Integer.indexOf(midi_cmd) >= 0) {\n      // ONE INT PARAMETER\n      if (midi.length !== 1) warn(\"Expected one parameter in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\") warn(\"Expected one integer parameter in MIDI \" + midi_cmd, restOfString, 0);else midi_params.push(midi[0].intt);\n    } else if (midiCmdParam1Integer1OptionalInteger.indexOf(midi_cmd) >= 0) {\n      // ONE INT PARAMETER, ONE OPTIONAL PARAMETER\n      if (midi.length !== 1 && midi.length !== 2) warn(\"Expected one or two parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\") warn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);else if (midi.length === 2 && midi[1].type !== \"number\") warn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].intt);\n        if (midi.length === 2) midi_params.push(midi[1].intt);\n      }\n    } else if (midiCmdParam2Integer.indexOf(midi_cmd) >= 0) {\n      // TWO INT PARAMETERS\n      if (midi.length !== 2) warn(\"Expected two parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\" || midi[1].type !== \"number\") warn(\"Expected two integer parameters in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].intt);\n        midi_params.push(midi[1].intt);\n      }\n    } else if (midiCmdParam1String1Integer.indexOf(midi_cmd) >= 0) {\n      // ONE STRING PARAMETER, ONE INT PARAMETER\n      if (midi.length !== 2) warn(\"Expected two parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"alpha\" || midi[1].type !== \"number\") warn(\"Expected one string and one integer parameters in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].token);\n        midi_params.push(midi[1].intt);\n      }\n    } else if (midi_cmd === 'drummap') {\n      // BUILD AN OBJECT OF ABC NOTE => MIDI NOTE\n      if (midi.length === 2 && midi[0].type === 'alpha' && midi[1].type === 'number') {\n        if (!tune.formatting) tune.formatting = {};\n        if (!tune.formatting.midi) tune.formatting.midi = {};\n        if (!tune.formatting.midi.drummap) tune.formatting.midi.drummap = {};\n        tune.formatting.midi.drummap[midi[0].token] = midi[1].intt;\n        midi_params = tune.formatting.midi.drummap;\n      } else if (midi.length === 3 && midi[0].type === 'punct' && midi[1].type === 'alpha' && midi[2].type === 'number') {\n        if (!tune.formatting) tune.formatting = {};\n        if (!tune.formatting.midi) tune.formatting.midi = {};\n        if (!tune.formatting.midi.drummap) tune.formatting.midi.drummap = {};\n        tune.formatting.midi.drummap[midi[0].token + midi[1].token] = midi[2].intt;\n        midi_params = tune.formatting.midi.drummap;\n      } else {\n        warn(\"Expected one note name and one integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n      }\n    } else if (midiCmdParamFraction.indexOf(midi_cmd) >= 0) {\n      // ONE FRACTION PARAMETER\n      if (midi.length !== 3) warn(\"Expected fraction parameter in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\" || midi[1].token !== \"/\" || midi[2].type !== \"number\") warn(\"Expected fraction parameter in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].intt);\n        midi_params.push(midi[2].intt);\n      }\n    } else if (midiCmdParam4Integer.indexOf(midi_cmd) >= 0) {\n      // FOUR INT PARAMETERS\n      if (midi.length !== 4) warn(\"Expected four parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\" || midi[1].type !== \"number\" || midi[2].type !== \"number\" || midi[3].type !== \"number\") warn(\"Expected four integer parameters in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].intt);\n        midi_params.push(midi[1].intt);\n        midi_params.push(midi[2].intt);\n        midi_params.push(midi[3].intt);\n      }\n    } else if (midiCmdParam5Integer.indexOf(midi_cmd) >= 0) {\n      // FIVE INT PARAMETERS\n      if (midi.length !== 5) warn(\"Expected five parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\" || midi[1].type !== \"number\" || midi[2].type !== \"number\" || midi[3].type !== \"number\" || midi[4].type !== \"number\") warn(\"Expected five integer parameters in MIDI \" + midi_cmd, restOfString, 0);else {\n        midi_params.push(midi[0].intt);\n        midi_params.push(midi[1].intt);\n        midi_params.push(midi[2].intt);\n        midi_params.push(midi[3].intt);\n        midi_params.push(midi[4].intt);\n      }\n    } else if (midiCmdParam1Integer1OptionalInteger.indexOf(midi_cmd) >= 0) {\n      // ONE INT PARAMETER, ONE OPTIONAL OCTAVE PARAMETER\n      if (midi.length !== 1 || midi.length !== 4) warn(\"Expected one or two parameters in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"number\") warn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);else if (midi.length === 4) {\n        if (midi[1].token !== \"octave\") warn(\"Expected octave parameter in MIDI \" + midi_cmd, restOfString, 0);\n        if (midi[2].token !== \"=\") warn(\"Expected octave parameter in MIDI \" + midi_cmd, restOfString, 0);\n        if (midi[3].type !== \"number\") warn(\"Expected integer parameter for octave in MIDI \" + midi_cmd, restOfString, 0);\n      } else {\n        midi_params.push(midi[0].intt);\n        if (midi.length === 4) midi_params.push(midi[3].intt);\n      }\n    } else if (midiCmdParam1StringVariableIntegers.indexOf(midi_cmd) >= 0) {\n      // ONE STRING, VARIABLE INT PARAMETERS\n      if (midi.length < 2) warn(\"Expected string parameter and at least one integer parameter in MIDI \" + midi_cmd, restOfString, 0);else if (midi[0].type !== \"alpha\") warn(\"Expected string parameter and at least one integer parameter in MIDI \" + midi_cmd, restOfString, 0);else {\n        var p = midi.shift();\n        midi_params.push(p.token);\n\n        while (midi.length > 0) {\n          p = midi.shift();\n          if (p.type !== \"number\") warn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n          midi_params.push(p.intt);\n        }\n      }\n    }\n\n    if (tune.hasBeginMusic()) tune.appendElement('midi', -1, -1, {\n      cmd: midi_cmd,\n      params: midi_params\n    });else {\n      if (tune.formatting['midi'] === undefined) tune.formatting['midi'] = {};\n      tune.formatting['midi'][midi_cmd] = midi_params;\n    }\n  };\n\n  parseDirective.parseFontChangeLine = function (textstr) {\n    var textParts = textstr.split('$');\n\n    if (textParts.length > 1 && multilineVars.setfont) {\n      var textarr = [{\n        text: textParts[0]\n      }];\n\n      for (var i = 1; i < textParts.length; i++) {\n        if (textParts[i].charAt(0) === '0') textarr.push({\n          text: textParts[i].substring(1)\n        });else if (textParts[i].charAt(0) === '1' && multilineVars.setfont[1]) textarr.push({\n          font: multilineVars.setfont[1],\n          text: textParts[i].substring(1)\n        });else if (textParts[i].charAt(0) === '2' && multilineVars.setfont[2]) textarr.push({\n          font: multilineVars.setfont[2],\n          text: textParts[i].substring(1)\n        });else if (textParts[i].charAt(0) === '3' && multilineVars.setfont[3]) textarr.push({\n          font: multilineVars.setfont[3],\n          text: textParts[i].substring(1)\n        });else if (textParts[i].charAt(0) === '4' && multilineVars.setfont[4]) textarr.push({\n          font: multilineVars.setfont[4],\n          text: textParts[i].substring(1)\n        });else textarr[textarr.length - 1].text += '$' + textParts[i];\n      }\n\n      if (textarr.length > 1) return textarr;\n    }\n\n    return textstr;\n  };\n\n  var positionChoices = ['auto', 'above', 'below', 'hidden'];\n\n  parseDirective.addDirective = function (str) {\n    var tokens = tokenizer.tokenize(str, 0, str.length); // 3 or more % in a row, or just spaces after %% is just a comment\n\n    if (tokens.length === 0 || tokens[0].type !== 'alpha') return null;\n    var restOfString = str.substring(str.indexOf(tokens[0].token) + tokens[0].token.length);\n    restOfString = tokenizer.stripComment(restOfString);\n    var cmd = tokens.shift().token.toLowerCase();\n    var scratch = \"\";\n\n    switch (cmd) {\n      // The following directives were added to abc_parser_lint, but haven't been implemented here.\n      // Most of them are direct translations from the directives that will be parsed in. See abcm2ps's format.txt for info on each of these.\n      //\t\t\t\t\talignbars: { type: \"number\", optional: true },\n      //\t\t\t\t\taligncomposer: { type: \"string\", Enum: [ 'left', 'center','right' ], optional: true },\n      //\t\t\t\t\tbstemdown: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tcontinueall: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tdynalign: { type: \"boolean\", optional: true },\n      //\t\t\t\t\texprabove: { type: \"boolean\", optional: true },\n      //\t\t\t\t\texprbelow: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tgchordbox: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tgraceslurs: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tgracespacebefore: { type: \"number\", optional: true },\n      //\t\t\t\t\tgracespaceinside: { type: \"number\", optional: true },\n      //\t\t\t\t\tgracespaceafter: { type: \"number\", optional: true },\n      //\t\t\t\t\tinfospace: { type: \"number\", optional: true },\n      //\t\t\t\t\tlineskipfac: { type: \"number\", optional: true },\n      //\t\t\t\t\tmaxshrink: { type: \"number\", optional: true },\n      //\t\t\t\t\tmaxstaffsep: { type: \"number\", optional: true },\n      //\t\t\t\t\tmaxsysstaffsep: { type: \"number\", optional: true },\n      //\t\t\t\t\tnotespacingfactor: { type: \"number\", optional: true },\n      //\t\t\t\t\tparskipfac: { type: \"number\", optional: true },\n      //\t\t\t\t\tslurheight: { type: \"number\", optional: true },\n      //\t\t\t\t\tsplittune: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tsquarebreve: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tstemheight: { type: \"number\", optional: true },\n      //\t\t\t\t\tstraightflags: { type: \"boolean\", optional: true },\n      //\t\t\t\t\tstretchstaff: { type: \"boolean\", optional: true },\n      //\t\t\t\t\ttitleformat: { type: \"string\", optional: true },\n      case \"bagpipes\":\n        tune.formatting.bagpipes = true;\n        break;\n\n      case \"flatbeams\":\n        tune.formatting.flatbeams = true;\n        break;\n\n      case \"landscape\":\n        multilineVars.landscape = true;\n        break;\n\n      case \"papersize\":\n        multilineVars.papersize = restOfString;\n        break;\n\n      case \"slurgraces\":\n        tune.formatting.slurgraces = true;\n        break;\n\n      case \"stretchlast\":\n        tune.formatting.stretchlast = true;\n        break;\n\n      case \"titlecaps\":\n        multilineVars.titlecaps = true;\n        break;\n\n      case \"titleleft\":\n        tune.formatting.titleleft = true;\n        break;\n\n      case \"measurebox\":\n        tune.formatting.measurebox = true;\n        break;\n\n      case \"vocal\":\n        return addMultilineVarOneParamChoice(\"vocalPosition\", cmd, tokens, positionChoices);\n\n      case \"dynamic\":\n        return addMultilineVarOneParamChoice(\"dynamicPosition\", cmd, tokens, positionChoices);\n\n      case \"gchord\":\n        return addMultilineVarOneParamChoice(\"chordPosition\", cmd, tokens, positionChoices);\n\n      case \"ornament\":\n        return addMultilineVarOneParamChoice(\"ornamentPosition\", cmd, tokens, positionChoices);\n\n      case \"volume\":\n        return addMultilineVarOneParamChoice(\"volumePosition\", cmd, tokens, positionChoices);\n\n      case \"botmargin\":\n      case \"botspace\":\n      case \"composerspace\":\n      case \"indent\":\n      case \"leftmargin\":\n      case \"linesep\":\n      case \"musicspace\":\n      case \"partsspace\":\n      case \"pageheight\":\n      case \"pagewidth\":\n      case \"rightmargin\":\n      case \"staffsep\":\n      case \"staffwidth\":\n      case \"subtitlespace\":\n      case \"sysstaffsep\":\n      case \"systemsep\":\n      case \"textspace\":\n      case \"titlespace\":\n      case \"topmargin\":\n      case \"topspace\":\n      case \"vocalspace\":\n      case \"wordsspace\":\n        return oneParameterMeasurement(cmd, tokens);\n\n      case \"voicescale\":\n        if (tokens.length !== 1 || tokens[0].type !== 'number') return \"voicescale requires one float as a parameter\";\n        var voiceScale = tokens.shift();\n\n        if (multilineVars.currentVoice) {\n          multilineVars.currentVoice.scale = voiceScale.floatt;\n          tune.changeVoiceScale(multilineVars.currentVoice.scale);\n        }\n\n        return null;\n\n      case \"vskip\":\n        var vskip = getRequiredMeasurement(cmd, tokens);\n        if (vskip.error) return vskip.error;\n        tune.addSpacing(vskip);\n        return null;\n\n      case \"scale\":\n        setScale(cmd, tokens);\n        break;\n\n      case \"sep\":\n        if (tokens.length === 0) tune.addSeparator();else {\n          var points = tokenizer.getMeasurement(tokens);\n          if (points.used === 0) return \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n          var spaceAbove = points.value;\n          points = tokenizer.getMeasurement(tokens);\n          if (points.used === 0) return \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n          var spaceBelow = points.value;\n          points = tokenizer.getMeasurement(tokens);\n          if (points.used === 0 || tokens.length !== 0) return \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n          var lenLine = points.value;\n          tune.addSeparator(spaceAbove, spaceBelow, lenLine);\n        }\n        break;\n\n      case \"barsperstaff\":\n        scratch = addMultilineVar('barsperstaff', cmd, tokens);\n        if (scratch !== null) return scratch;\n        break;\n\n      case \"staffnonote\":\n        // The sense of the boolean is opposite here. \"0\" means true.\n        if (tokens.length !== 1) return \"Directive staffnonote requires one parameter: 0 or 1\";\n        if (tokens[0].token === '0') multilineVars.staffnonote = true;else if (tokens[0].token === '1') multilineVars.staffnonote = false;else return \"Directive staffnonote requires one parameter: 0 or 1 (received \" + tokens[0].token + ')';\n        break;\n\n      case \"printtempo\":\n        scratch = addMultilineVarBool('printTempo', cmd, tokens);\n        if (scratch !== null) return scratch;\n        break;\n\n      case \"partsbox\":\n        scratch = addMultilineVarBool('partsBox', cmd, tokens);\n        if (scratch !== null) return scratch;\n        multilineVars.partsfont.box = multilineVars.partsBox;\n        break;\n\n      case \"freegchord\":\n        scratch = addMultilineVarBool('freegchord', cmd, tokens);\n        if (scratch !== null) return scratch;\n        break;\n\n      case \"measurenb\":\n      case \"barnumbers\":\n        scratch = addMultilineVar('barNumbers', cmd, tokens);\n        if (scratch !== null) return scratch;\n        break;\n\n      case \"setbarnb\":\n        if (tokens.length !== 1 || tokens[0].type !== 'number') {\n          return 'Directive setbarnb requires a number as a parameter.';\n        }\n\n        multilineVars.currBarNumber = tune.setBarNumberImmediate(tokens[0].intt);\n        break;\n\n      case \"begintext\":\n        multilineVars.inTextBlock = true;\n        break;\n\n      case \"continueall\":\n        multilineVars.continueall = true;\n        break;\n\n      case \"beginps\":\n        multilineVars.inPsBlock = true;\n        warn(\"Postscript ignored\", str, 0);\n        break;\n\n      case \"deco\":\n        if (restOfString.length > 0) multilineVars.ignoredDecorations.push(restOfString.substring(0, restOfString.indexOf(' ')));\n        warn(\"Decoration redefinition ignored\", str, 0);\n        break;\n\n      case \"text\":\n        var textstr = tokenizer.translateString(restOfString);\n        tune.addText(parseDirective.parseFontChangeLine(textstr));\n        break;\n\n      case \"center\":\n        var centerstr = tokenizer.translateString(restOfString);\n        tune.addCentered(parseDirective.parseFontChangeLine(centerstr));\n        break;\n\n      case \"font\":\n        // don't need to do anything for this; it is a useless directive\n        break;\n\n      case \"setfont\":\n        var sfTokens = tokenizer.tokenize(restOfString, 0, restOfString.length); //\t\t\t\tvar sfDone = false;\n\n        if (sfTokens.length >= 4) {\n          if (sfTokens[0].token === '-' && sfTokens[1].type === 'number') {\n            var sfNum = parseInt(sfTokens[1].token);\n\n            if (sfNum >= 1 && sfNum <= 4) {\n              if (!multilineVars.setfont) multilineVars.setfont = [];\n              sfTokens.shift();\n              sfTokens.shift();\n              multilineVars.setfont[sfNum] = getFontParameter(sfTokens, multilineVars.setfont[sfNum], str, 0, 'setfont'); //\t\t\t\t\t\t\tvar sfSize = sfTokens.pop();\n              //\t\t\t\t\t\t\tif (sfSize.type === 'number') {\n              //\t\t\t\t\t\t\t\tsfSize = parseInt(sfSize.token);\n              //\t\t\t\t\t\t\t\tvar sfFontName = '';\n              //\t\t\t\t\t\t\t\tfor (var sfi = 2; sfi < sfTokens.length; sfi++)\n              //\t\t\t\t\t\t\t\t\tsfFontName += sfTokens[sfi].token;\n              //\t\t\t\t\t\t\t\tmultilineVars.setfont[sfNum] = { face: sfFontName, size: sfSize };\n              //\t\t\t\t\t\t\t\tsfDone = true;\n              //\t\t\t\t\t\t\t}\n            }\n          }\n        } //\t\t\t\tif (!sfDone)\n        //\t\t\t\t\treturn \"Bad parameters: \" + cmd;\n\n\n        break;\n\n      case \"gchordfont\":\n      case \"partsfont\":\n      case \"tripletfont\":\n      case \"vocalfont\":\n      case \"textfont\":\n      case \"annotationfont\":\n      case \"historyfont\":\n      case \"infofont\":\n      case \"measurefont\":\n      case \"repeatfont\":\n      case \"wordsfont\":\n        return getChangingFont(cmd, tokens, str);\n\n      case \"composerfont\":\n      case \"subtitlefont\":\n      case \"tempofont\":\n      case \"titlefont\":\n      case \"voicefont\":\n      case \"footerfont\":\n      case \"headerfont\":\n        return getGlobalFont(cmd, tokens, str);\n\n      case \"barlabelfont\":\n      case \"barnumberfont\":\n      case \"barnumfont\":\n        return getChangingFont(\"measurefont\", tokens, str);\n\n      case \"staves\":\n      case \"score\":\n        multilineVars.score_is_present = true;\n\n        var addVoice = function (id, newStaff, bracket, brace, continueBar) {\n          if (newStaff || multilineVars.staves.length === 0) {\n            multilineVars.staves.push({\n              index: multilineVars.staves.length,\n              numVoices: 0\n            });\n          }\n\n          var staff = parseCommon.last(multilineVars.staves);\n          if (bracket !== undefined) staff.bracket = bracket;\n          if (brace !== undefined) staff.brace = brace;\n          if (continueBar) staff.connectBarLines = 'end';\n\n          if (multilineVars.voices[id] === undefined) {\n            multilineVars.voices[id] = {\n              staffNum: staff.index,\n              index: staff.numVoices\n            };\n            staff.numVoices++;\n          }\n        };\n\n        var openParen = false;\n        var openBracket = false;\n        var openBrace = false;\n        var justOpenParen = false;\n        var justOpenBracket = false;\n        var justOpenBrace = false;\n        var continueBar = false;\n        var lastVoice;\n\n        var addContinueBar = function () {\n          continueBar = true;\n\n          if (lastVoice) {\n            var ty = 'start';\n\n            if (lastVoice.staffNum > 0) {\n              if (multilineVars.staves[lastVoice.staffNum - 1].connectBarLines === 'start' || multilineVars.staves[lastVoice.staffNum - 1].connectBarLines === 'continue') ty = 'continue';\n            }\n\n            multilineVars.staves[lastVoice.staffNum].connectBarLines = ty;\n          }\n        };\n\n        while (tokens.length) {\n          var t = tokens.shift();\n\n          switch (t.token) {\n            case '(':\n              if (openParen) warn(\"Can't nest parenthesis in %%score\", str, t.start);else {\n                openParen = true;\n                justOpenParen = true;\n              }\n              break;\n\n            case ')':\n              if (!openParen || justOpenParen) warn(\"Unexpected close parenthesis in %%score\", str, t.start);else openParen = false;\n              break;\n\n            case '[':\n              if (openBracket) warn(\"Can't nest brackets in %%score\", str, t.start);else {\n                openBracket = true;\n                justOpenBracket = true;\n              }\n              break;\n\n            case ']':\n              if (!openBracket || justOpenBracket) warn(\"Unexpected close bracket in %%score\", str, t.start);else {\n                openBracket = false;\n                multilineVars.staves[lastVoice.staffNum].bracket = 'end';\n              }\n              break;\n\n            case '{':\n              if (openBrace) warn(\"Can't nest braces in %%score\", str, t.start);else {\n                openBrace = true;\n                justOpenBrace = true;\n              }\n              break;\n\n            case '}':\n              if (!openBrace || justOpenBrace) warn(\"Unexpected close brace in %%score\", str, t.start);else {\n                openBrace = false;\n                multilineVars.staves[lastVoice.staffNum].brace = 'end';\n              }\n              break;\n\n            case '|':\n              addContinueBar();\n              break;\n\n            default:\n              var vc = \"\";\n\n              while (t.type === 'alpha' || t.type === 'number') {\n                vc += t.token;\n                if (t.continueId) t = tokens.shift();else break;\n              }\n\n              var newStaff = !openParen || justOpenParen;\n              var bracket = justOpenBracket ? 'start' : openBracket ? 'continue' : undefined;\n              var brace = justOpenBrace ? 'start' : openBrace ? 'continue' : undefined;\n              addVoice(vc, newStaff, bracket, brace, continueBar);\n              justOpenParen = false;\n              justOpenBracket = false;\n              justOpenBrace = false;\n              continueBar = false;\n              lastVoice = multilineVars.voices[vc];\n              if (cmd === 'staves') addContinueBar();\n              break;\n          }\n        }\n\n        break;\n\n      case \"newpage\":\n        var pgNum = tokenizer.getInt(restOfString);\n        tune.addNewPage(pgNum.digits === 0 ? -1 : pgNum.value);\n        break;\n\n      case \"abc\":\n        var arr = restOfString.split(' ');\n\n        switch (arr[0]) {\n          case \"-copyright\":\n          case \"-creator\":\n          case \"-edited-by\":\n          case \"-version\":\n          case \"-charset\":\n            var subCmd = arr.shift();\n            tune.addMetaText(cmd + subCmd, arr.join(' '));\n            break;\n\n          default:\n            return \"Unknown directive: \" + cmd + arr[0];\n        }\n\n        break;\n\n      case \"header\":\n      case \"footer\":\n        var footerStr = tokenizer.getMeat(restOfString, 0, restOfString.length);\n        footerStr = restOfString.substring(footerStr.start, footerStr.end);\n        if (footerStr.charAt(0) === '\"' && footerStr.charAt(footerStr.length - 1) === '\"') footerStr = footerStr.substring(1, footerStr.length - 1);\n        var footerArr = footerStr.split('\\t');\n        var footer = {};\n        if (footerArr.length === 1) footer = {\n          left: \"\",\n          center: footerArr[0],\n          right: \"\"\n        };else if (footerArr.length === 2) footer = {\n          left: footerArr[0],\n          center: footerArr[1],\n          right: \"\"\n        };else footer = {\n          left: footerArr[0],\n          center: footerArr[1],\n          right: footerArr[2]\n        };\n        if (footerArr.length > 3) warn(\"Too many tabs in \" + cmd + \": \" + footerArr.length + \" found.\", restOfString, 0);\n        tune.addMetaTextObj(cmd, footer);\n        break;\n\n      case \"midi\":\n        var midi = tokenizer.tokenize(restOfString, 0, restOfString.length, true);\n        if (midi.length > 0 && midi[0].token === '=') midi.shift();\n        if (midi.length === 0) warn(\"Expected midi command\", restOfString, 0);else parseMidiCommand(midi, tune, restOfString);\n        break;\n\n      case \"map\":\n      case \"percmap\":\n      case \"playtempo\":\n      case \"auquality\":\n      case \"continuous\":\n      case \"nobarcheck\":\n        // TODO-PER: Actually handle the parameters of these\n        tune.formatting[cmd] = restOfString;\n        break;\n\n      default:\n        return \"Unknown directive: \" + cmd;\n    }\n\n    return null;\n  };\n\n  parseDirective.globalFormatting = function (formatHash) {\n    for (var cmd in formatHash) {\n      if (formatHash.hasOwnProperty(cmd)) {\n        var value = '' + formatHash[cmd];\n        var tokens = tokenizer.tokenize(value, 0, value.length);\n        var scratch;\n\n        switch (cmd) {\n          case \"titlefont\":\n          case \"gchordfont\":\n          case \"composerfont\":\n          case \"footerfont\":\n          case \"headerfont\":\n          case \"historyfont\":\n          case \"infofont\":\n          case \"measurefont\":\n          case \"partsfont\":\n          case \"repeatfont\":\n          case \"subtitlefont\":\n          case \"tempofont\":\n          case \"textfont\":\n          case \"voicefont\":\n          case \"tripletfont\":\n          case \"vocalfont\":\n          case \"wordsfont\":\n          case \"annotationfont\":\n            getChangingFont(cmd, tokens, value);\n            break;\n\n          case \"scale\":\n            setScale(cmd, tokens);\n            break;\n\n          case \"partsbox\":\n            scratch = addMultilineVarBool('partsBox', cmd, tokens);\n            if (scratch !== null) warn(scratch);\n            multilineVars.partsfont.box = multilineVars.partsBox;\n            break;\n\n          case \"freegchord\":\n            scratch = addMultilineVarBool('freegchord', cmd, tokens);\n            if (scratch !== null) warn(scratch);\n\n          default:\n            warn(\"Formatting directive unrecognized: \", cmd, 0);\n        }\n      }\n    }\n  };\n})();\n\nmodule.exports = parseDirective;","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/node_modules/react-sheet-music/node_modules/abcjs/src/parse/abc_parse_directive.js"],"names":["parseCommon","require","parseDirective","tokenizer","warn","multilineVars","tune","initialize","tokenizer_","warn_","multilineVars_","tune_","initializeFonts","annotationfont","face","size","weight","style","decoration","gchordfont","historyfont","infofont","measurefont","partsfont","repeatfont","textfont","tripletfont","vocalfont","wordsfont","formatting","composerfont","subtitlefont","tempofont","titlefont","footerfont","headerfont","voicefont","fontTypeCanHaveBox","fontTranslation","fontFace","getFontParameter","tokens","currentSetting","str","position","cmd","processNumberOnly","parseInt","token","shift","length","box","type","state","hyphenLast","currToken","word","toLowerCase","push","undefined","parseFloat","join","psFont","font","getChangingFont","is_in_header","getGlobalFont","setScale","scratch","each","tok","num","isNaN","scale","getRequiredMeasurement","points","getMeasurement","used","error","value","oneParameterMeasurement","addMultilineVar","key","min","max","i","intt","addMultilineVarBool","addMultilineVarOneParamChoice","choices","choice","found","midiCmdParam0","midiCmdParam1String","midiCmdParam1Integer","midiCmdParam1Integer1OptionalInteger","midiCmdParam2Integer","midiCmdParam4Integer","midiCmdParam5Integer","midiCmdParam1IntegerOptionalOctave","midiCmdParam1String1Integer","midiCmdParamFraction","midiCmdParam1StringVariableIntegers","parseMidiCommand","midi","restOfString","midi_cmd","midi_params","indexOf","drummap","p","hasBeginMusic","appendElement","params","parseFontChangeLine","textstr","textParts","split","setfont","textarr","text","charAt","substring","positionChoices","addDirective","tokenize","stripComment","bagpipes","flatbeams","landscape","papersize","slurgraces","stretchlast","titlecaps","titleleft","measurebox","voiceScale","currentVoice","floatt","changeVoiceScale","vskip","addSpacing","addSeparator","spaceAbove","spaceBelow","lenLine","staffnonote","partsBox","currBarNumber","setBarNumberImmediate","inTextBlock","continueall","inPsBlock","ignoredDecorations","translateString","addText","centerstr","addCentered","sfTokens","sfNum","score_is_present","addVoice","id","newStaff","bracket","brace","continueBar","staves","index","numVoices","staff","last","connectBarLines","voices","staffNum","openParen","openBracket","openBrace","justOpenParen","justOpenBracket","justOpenBrace","lastVoice","addContinueBar","ty","t","start","vc","continueId","pgNum","getInt","addNewPage","digits","arr","subCmd","addMetaText","footerStr","getMeat","end","footerArr","footer","left","center","right","addMetaTextObj","globalFormatting","formatHash","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["/*global window */\n\nvar parseCommon = require('./abc_common');\n\nvar parseDirective = {};\n\n(function() {\n\t\"use strict\";\n\tvar tokenizer;\n\tvar warn;\n\tvar multilineVars;\n\tvar tune;\n\tparseDirective.initialize = function(tokenizer_, warn_, multilineVars_, tune_) {\n\t\ttokenizer = tokenizer_;\n\t\twarn = warn_;\n\t\tmultilineVars = multilineVars_;\n\t\ttune = tune_;\n\t\tinitializeFonts();\n\t};\n\n\tfunction initializeFonts() {\n\t\tmultilineVars.annotationfont  = { face: \"Helvetica\", size: 12, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.gchordfont  = { face: \"Helvetica\", size: 12, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.historyfont  = { face: \"\\\"Times New Roman\\\"\", size: 16, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.infofont  = { face: \"\\\"Times New Roman\\\"\", size: 14, weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\tmultilineVars.measurefont  = { face: \"\\\"Times New Roman\\\"\", size: 14, weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\tmultilineVars.partsfont  = { face: \"\\\"Times New Roman\\\"\", size: 15, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.repeatfont  = { face: \"\\\"Times New Roman\\\"\", size: 13, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.textfont  = { face: \"\\\"Times New Roman\\\"\", size: 16, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.tripletfont = {face: \"Times\", size: 11, weight: \"normal\", style: \"italic\", decoration: \"none\"};\n\t\tmultilineVars.vocalfont  = { face: \"\\\"Times New Roman\\\"\", size: 13, weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\tmultilineVars.wordsfont  = { face: \"\\\"Times New Roman\\\"\", size: 16, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\n\t\t// These fonts are global for the entire tune.\n\t\ttune.formatting.composerfont  = { face: \"\\\"Times New Roman\\\"\", size: 14, weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\ttune.formatting.subtitlefont  = { face: \"\\\"Times New Roman\\\"\", size: 16, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\ttune.formatting.tempofont  = { face: \"\\\"Times New Roman\\\"\", size: 15, weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\ttune.formatting.titlefont  = { face: \"\\\"Times New Roman\\\"\", size: 20, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\ttune.formatting.footerfont  = { face: \"\\\"Times New Roman\\\"\", size: 12, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\ttune.formatting.headerfont  = { face: \"\\\"Times New Roman\\\"\", size: 12, weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\ttune.formatting.voicefont  = { face: \"\\\"Times New Roman\\\"\", size: 13, weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\n\t\t// these are the default fonts for these element types. In the printer, these fonts might change as the tune progresses.\n\t\ttune.formatting.annotationfont  = multilineVars.annotationfont;\n\t\ttune.formatting.gchordfont  = multilineVars.gchordfont;\n\t\ttune.formatting.historyfont  = multilineVars.historyfont;\n\t\ttune.formatting.infofont  = multilineVars.infofont;\n\t\ttune.formatting.measurefont  = multilineVars.measurefont;\n\t\ttune.formatting.partsfont  = multilineVars.partsfont;\n\t\ttune.formatting.repeatfont  = multilineVars.repeatfont;\n\t\ttune.formatting.textfont  = multilineVars.textfont;\n\t\ttune.formatting.tripletfont  = multilineVars.tripletfont;\n\t\ttune.formatting.vocalfont  = multilineVars.vocalfont;\n\t\ttune.formatting.wordsfont  = multilineVars.wordsfont;\n\t}\n\n\tvar fontTypeCanHaveBox = { gchordfont: true, measurefont: true, partsfont: true };\n\n\tvar fontTranslation = function(fontFace) {\n\t\t// This translates Postscript fonts for a web alternative.\n\t\t// Note that the postscript fonts contain italic and bold info in them, so what is returned is a hash.\n\n\t\tswitch (fontFace) {\n\t\t\tcase \"Arial-Italic\":\n\t\t\t\treturn { face: \"Arial\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Arial-Bold\":\n\t\t\t\treturn { face: \"Arial\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Bookman-Demi\":\n\t\t\t\treturn { face: \"Bookman,serif\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Bookman-DemiItalic\":\n\t\t\t\treturn { face: \"Bookman,serif\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Bookman-Light\":\n\t\t\t\treturn { face: \"Bookman,serif\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Bookman-LightItalic\":\n\t\t\t\treturn { face: \"Bookman,serif\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Courier\":\n\t\t\t\treturn { face: \"\\\"Courier New\\\"\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Courier-Oblique\":\n\t\t\t\treturn { face: \"\\\"Courier New\\\"\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Courier-Bold\":\n\t\t\t\treturn { face: \"\\\"Courier New\\\"\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Courier-BoldOblique\":\n\t\t\t\treturn { face: \"\\\"Courier New\\\"\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"AvantGarde-Book\":\n\t\t\t\treturn { face: \"AvantGarde,Arial\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"AvantGarde-BookOblique\":\n\t\t\t\treturn { face: \"AvantGarde,Arial\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"AvantGarde-Demi\":\n\t\t\tcase \"Avant-Garde-Demi\":\n\t\t\t\treturn { face: \"AvantGarde,Arial\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"AvantGarde-DemiOblique\":\n\t\t\t\treturn { face: \"AvantGarde,Arial\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Oblique\":\n\t\t\t\treturn { face: \"Helvetica\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Bold\":\n\t\t\t\treturn { face: \"Helvetica\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-BoldOblique\":\n\t\t\t\treturn { face: \"Helvetica\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Narrow\":\n\t\t\t\treturn { face: \"\\\"Helvetica Narrow\\\",Helvetica\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Narrow-Oblique\":\n\t\t\t\treturn { face: \"\\\"Helvetica Narrow\\\",Helvetica\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Narrow-Bold\":\n\t\t\t\treturn { face: \"\\\"Helvetica Narrow\\\",Helvetica\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Helvetica-Narrow-BoldOblique\":\n\t\t\t\treturn { face: \"\\\"Helvetica Narrow\\\",Helvetica\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Palatino-Roman\":\n\t\t\t\treturn { face: \"Palatino\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Palatino-Italic\":\n\t\t\t\treturn { face: \"Palatino\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Palatino-Bold\":\n\t\t\t\treturn { face: \"Palatino\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Palatino-BoldItalic\":\n\t\t\t\treturn { face: \"Palatino\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"NewCenturySchlbk-Roman\":\n\t\t\t\treturn { face: \"\\\"New Century\\\",serif\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"NewCenturySchlbk-Italic\":\n\t\t\t\treturn { face: \"\\\"New Century\\\",serif\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"NewCenturySchlbk-Bold\":\n\t\t\t\treturn { face: \"\\\"New Century\\\",serif\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"NewCenturySchlbk-BoldItalic\":\n\t\t\t\treturn { face: \"\\\"New Century\\\",serif\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Times\":\n\t\t\tcase \"Times-Roman\":\n\t\t\tcase \"Times-Narrow\":\n\t\t\tcase \"Times-Courier\":\n\t\t\tcase \"Times-New-Roman\":\n\t\t\t\treturn { face: \"\\\"Times New Roman\\\"\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Times-Italic\":\n\t\t\tcase \"Times-Italics\":\n\t\t\t\treturn { face: \"\\\"Times New Roman\\\"\", weight: \"normal\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"Times-Bold\":\n\t\t\t\treturn { face: \"\\\"Times New Roman\\\"\", weight: \"bold\", style: \"normal\", decoration: \"none\" };\n\t\t\tcase \"Times-BoldItalic\":\n\t\t\t\treturn { face: \"\\\"Times New Roman\\\"\", weight: \"bold\", style: \"italic\", decoration: \"none\" };\n\t\t\tcase \"ZapfChancery-MediumItalic\":\n\t\t\t\treturn { face: \"\\\"Zapf Chancery\\\",cursive,serif\", weight: \"normal\", style: \"normal\", decoration: \"none\" };\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t};\n\n\tvar getFontParameter = function(tokens, currentSetting, str, position, cmd) {\n\t\t// Every font parameter has the following format:\n\t\t// <face> <utf8> <size> <modifiers> <box>\n\t\t// Where:\n\t\t// face: either a standard web font name, or a postscript font, enumerated in fontTranslation. This could also be an * or be missing if the face shouldn't change.\n\t\t// utf8: This is optional, and specifies utf8. That's all that is supported so the field is just silently ignored.\n\t\t// size: The size, in pixels. This may be omitted if the size is not changing.\n\t\t// modifiers: zero or more of \"bold\", \"italic\", \"underline\"\n\t\t// box: Only applies to the measure numbers, gchords, and the parts. If present, then a box is drawn around the characters.\n\t\t// If face is present, then all the modifiers are cleared. If face is absent, then the modifiers are illegal.\n\t\t// The face can be a single word, a set of words separated by hyphens, or a quoted string.\n\t\t//\n\t\t// So, in practicality, there are three types of font definitions: a number only, an asterisk and a number only, or the full definition (with an optional size).\n\t\tfunction processNumberOnly() {\n\t\t\tvar size = parseInt(tokens[0].token);\n\t\t\ttokens.shift();\n\t\t\tif (!currentSetting) {\n\t\t\t\twarn(\"Can't set just the size of the font since there is no default value.\", str, position);\n\t\t\t\treturn { face: \"\\\"Times New Roman\\\"\", weight: \"normal\", style: \"normal\", decoration: \"none\", size: size};\n\t\t\t}\n\t\t\tif (tokens.length === 0) {\n\t\t\t\treturn { face: currentSetting.face, weight: currentSetting.weight, style: currentSetting.style, decoration: currentSetting.decoration, size: size};\n\t\t\t}\n\t\t\tif (tokens.length === 1 && tokens[0].token === \"box\" && fontTypeCanHaveBox[cmd])\n\t\t\t\treturn { face: currentSetting.face, weight: currentSetting.weight, style: currentSetting.style, decoration: currentSetting.decoration, size: size, box: true};\n\t\t\twarn(\"Extra parameters in font definition.\", str, position);\n\t\t\treturn { face: currentSetting.face, weight: currentSetting.weight, style: currentSetting.style, decoration: currentSetting.decoration, size: size};\n\t\t}\n\n\t\t// format 1: asterisk and number only\n\t\tif (tokens[0].token === '*') {\n\t\t\ttokens.shift();\n\t\t\tif (tokens[0].type === 'number')\n\t\t\t\treturn processNumberOnly();\n\t\t\telse {\n\t\t\t\twarn(\"Expected font size number after *.\", str, position);\n\t\t\t}\n\t\t}\n\n\t\t// format 2: number only\n\t\tif (tokens[0].type === 'number') {\n\t\t\treturn processNumberOnly();\n\t\t}\n\n\t\t// format 3: whole definition\n\t\tvar face = [];\n\t\tvar size;\n\t\tvar weight = \"normal\";\n\t\tvar style = \"normal\";\n\t\tvar decoration = \"none\";\n\t\tvar box = false;\n\t\tvar state = 'face';\n\t\tvar hyphenLast = false;\n\t\twhile (tokens.length) {\n\t\t\tvar currToken = tokens.shift();\n\t\t\tvar word = currToken.token.toLowerCase();\n\t\t\tswitch (state) {\n\t\t\t\tcase 'face':\n\t\t\t\t\tif (hyphenLast || (word !== 'utf' && currToken.type !== 'number' && word !== \"bold\" && word !== \"italic\" && word !== \"underline\" && word !== \"box\")) {\n\t\t\t\t\t\tif (face.length > 0 && currToken.token === '-') {\n\t\t\t\t\t\t\thyphenLast = true;\n\t\t\t\t\t\t\tface[face.length-1] = face[face.length-1] + currToken.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (hyphenLast) {\n\t\t\t\t\t\t\t\thyphenLast = false;\n\t\t\t\t\t\t\t\tface[face.length-1] = face[face.length-1] + currToken.token;\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tface.push(currToken.token);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (currToken.type === 'number') {\n\t\t\t\t\t\t\tif (size) {\n\t\t\t\t\t\t\t\twarn(\"Font size specified twice in font definition.\", str, position);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsize = currToken.token;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstate = 'modifier';\n\t\t\t\t\t\t} else if (word === \"bold\")\n\t\t\t\t\t\t\tweight = \"bold\";\n\t\t\t\t\t\telse if (word === \"italic\")\n\t\t\t\t\t\t\tstyle = \"italic\";\n\t\t\t\t\t\telse if (word === \"underline\")\n\t\t\t\t\t\t\tdecoration = \"underline\";\n\t\t\t\t\t\telse if (word === \"box\") {\n\t\t\t\t\t\t\tif (fontTypeCanHaveBox[cmd])\n\t\t\t\t\t\t\t\tbox = true;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\twarn(\"This font style doesn't support \\\"box\\\"\", str, position);\n\t\t\t\t\t\t\tstate = \"finished\";\n\t\t\t\t\t\t} else if (word === \"utf\") {\n\t\t\t\t\t\t\tcurrToken = tokens.shift(); // this gets rid of the \"8\" after \"utf\"\n\t\t\t\t\t\t\tstate = \"size\";\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\twarn(\"Unknown parameter \" + currToken.token + \" in font definition.\", str, position);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"size\":\n\t\t\t\t\tif (currToken.type === 'number') {\n\t\t\t\t\t\tif (size) {\n\t\t\t\t\t\t\twarn(\"Font size specified twice in font definition.\", str, position);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsize = currToken.token;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\twarn(\"Expected font size in font definition.\", str, position);\n\t\t\t\t\t}\n\t\t\t\t\tstate = 'modifier';\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"modifier\":\n\t\t\t\t\tif (word === \"bold\")\n\t\t\t\t\t\tweight = \"bold\";\n\t\t\t\t\telse if (word === \"italic\")\n\t\t\t\t\t\tstyle = \"italic\";\n\t\t\t\t\telse if (word === \"underline\")\n\t\t\t\t\t\tdecoration = \"underline\";\n\t\t\t\t\telse if (word === \"box\") {\n\t\t\t\t\t\tif (fontTypeCanHaveBox[cmd])\n\t\t\t\t\t\t\tbox = true;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\twarn(\"This font style doesn't support \\\"box\\\"\", str, position);\n\t\t\t\t\t\tstate = \"finished\";\n\t\t\t\t\t} else\n\t\t\t\t\t\twarn(\"Unknown parameter \" + currToken.token + \" in font definition.\", str, position);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"finished\":\n\t\t\t\t\twarn(\"Extra characters found after \\\"box\\\" in font definition.\", str, position);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (size === undefined) {\n\t\t\tif (!currentSetting) {\n\t\t\t\twarn(\"Must specify the size of the font since there is no default value.\", str, position);\n\t\t\t\tsize = 12;\n\t\t\t} else\n\t\t\t\tsize = currentSetting.size;\n\t\t} else\n\t\t\tsize = parseFloat(size);\n\n\t\tface = face.join(' ');\n\t\tvar psFont = fontTranslation(face);\n\t\tvar font = {};\n\t\tif (psFont) {\n\t\t\tfont.face = psFont.face;\n\t\t\tfont.weight = psFont.weight;\n\t\t\tfont.style = psFont.style;\n\t\t\tfont.decoration = psFont.decoration;\n\t\t\tfont.size = size;\n\t\t\tif (box)\n\t\t\t\tfont.box = true;\n\t\t\treturn font;\n\t\t}\n\t\tfont.face = face;\n\t\tfont.weight = weight;\n\t\tfont.style = style;\n\t\tfont.decoration = decoration;\n\t\tfont.size = size;\n\t\tif (box)\n\t\t\tfont.box = true;\n\t\treturn font;\n\t};\n\n\tvar getChangingFont = function(cmd, tokens, str) {\n\t\tif (tokens.length === 0)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a font as a parameter.\";\n\t\tmultilineVars[cmd] = getFontParameter(tokens, multilineVars[cmd], str, 0, cmd);\n\t\tif (multilineVars.is_in_header) // If the font appears in the header, then it becomes the default font.\n\t\t\ttune.formatting[cmd] = multilineVars[cmd];\n\t\treturn null;\n\t};\n\tvar getGlobalFont = function(cmd, tokens, str) {\n\t\tif (tokens.length === 0)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a font as a parameter.\";\n\t\ttune.formatting[cmd] = getFontParameter(tokens, tune.formatting[cmd], str, 0, cmd);\n\t\treturn null;\n\t};\n\n\tvar setScale = function(cmd, tokens) {\n\t\tvar scratch = \"\";\n\t\tparseCommon.each(tokens, function(tok) {\n\t\t\tscratch += tok.token;\n\t\t});\n\t\tvar num = parseFloat(scratch);\n\t\tif (isNaN(num) || num === 0)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a number as a parameter.\";\n\t\ttune.formatting.scale = num;\n\n\t};\n\n\tvar getRequiredMeasurement = function(cmd, tokens) {\n\t\tvar points = tokenizer.getMeasurement(tokens);\n\t\tif (points.used === 0 || tokens.length !== 0)\n\t\t\treturn { error: \"Directive \\\"\" + cmd + \"\\\" requires a measurement as a parameter.\"};\n\t\treturn points.value;\n\t};\n\tvar oneParameterMeasurement = function(cmd, tokens) {\n\t\tvar points = tokenizer.getMeasurement(tokens);\n\t\tif (points.used === 0 || tokens.length !== 0)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a measurement as a parameter.\";\n\t\ttune.formatting[cmd] = points.value;\n\t\treturn null;\n\t};\n\n\tvar addMultilineVar = function(key, cmd, tokens, min, max) {\n\t\tif (tokens.length !== 1 || tokens[0].type !== 'number')\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a number as a parameter.\";\n\t\tvar i = tokens[0].intt;\n\t\tif (min !== undefined && i < min)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a number greater than or equal to \" + min + \" as a parameter.\";\n\t\tif (max !== undefined && i > max)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires a number less than or equal to \" + max + \" as a parameter.\";\n\t\tmultilineVars[key] = i;\n\t\treturn null;\n\t};\n\n\tvar addMultilineVarBool = function(key, cmd, tokens) {\n\t\tif (tokens.length === 1 && (tokens[0].token === 'true' || tokens[0].token === 'false')) {\n\t\t\tmultilineVars[key] = tokens[0].token === 'true';\n\t\t\treturn null;\n\t\t}\n\t\tvar str = addMultilineVar(key, cmd, tokens, 0, 1);\n\t\tif (str !== null) return str;\n\t\tmultilineVars[key] = (multilineVars[key] === 1);\n\t\treturn null;\n\t};\n\n\tvar addMultilineVarOneParamChoice = function(key, cmd, tokens, choices) {\n\t\tif (tokens.length !== 1)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires one of [ \" + choices.join(\", \") + \" ] as a parameter.\";\n\t\tvar choice = tokens[0].token;\n\t\tvar found = false;\n\t\tfor (var i = 0; !found && i < choices.length; i++) {\n\t\t\tif (choices[i] === choice)\n\t\t\t\tfound = true;\n\t\t}\n\t\tif (!found)\n\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires one of [ \" + choices.join(\", \") + \" ] as a parameter.\";\n\t\tmultilineVars[key] = choice;\n\t\treturn null;\n\t};\n\n\tvar midiCmdParam0 = [\n\t\t\"nobarlines\",\n\t\t\"barlines\",\n\t\t\"beataccents\",\n\t\t\"nobeataccents\",\n\t\t\"droneon\",\n\t\t\"droneoff\",\n\t\t\"drumon\",\n\t\t\"drumoff\",\n\t\t\"fermatafixed\",\n\t\t\"fermataproportional\",\n\t\t\"gchordon\",\n\t\t\"gchordoff\",\n\t\t\"controlcombo\",\n\t\t\"temperamentnormal\",\n\t\t\"noportamento\"\n\t];\n\tvar midiCmdParam1String = [\n\t\t\"gchord\",\n\t\t\"ptstress\",\n\t\t\"beatstring\"\n\t];\n\tvar midiCmdParam1Integer = [\n\t\t\"bassvol\",\n\t\t\"chordvol\",\n\t\t\"c\",\n\t\t\"channel\",\n\t\t\"beatmod\",\n\t\t\"deltaloudness\",\n\t\t\"drumbars\",\n\t\t\"gracedivider\",\n\t\t\"makechordchannels\",\n\t\t\"randomchordattack\",\n\t\t\"chordattack\",\n\t\t\"stressmodel\",\n\t\t\"transpose\",\n\t\t\"rtranspose\",\n\t\t\"vol\",\n\t\t\"volinc\"\n\t];\n\tvar midiCmdParam1Integer1OptionalInteger = [\n\t\t\"program\"\n\t];\n\tvar midiCmdParam2Integer = [\n\t\t\"ratio\",\n\t\t\"snt\",\n\t\t\"bendvelocity\",\n\t\t\"pitchbend\",\n\t\t\"control\",\n\t\t\"temperamentlinear\"\n\t];\n\tvar midiCmdParam4Integer = [\n\t\t\"beat\"\n\t];\n\tvar midiCmdParam5Integer = [\n\t\t\"drone\"\n\t];\n\tvar midiCmdParam1IntegerOptionalOctave = [\n\t\t\"bassprog\",\n\t\t\"chordprog\"\n\t];\n\tvar midiCmdParam1String1Integer = [\n\t\t\"portamento\"\n\t];\n\tvar midiCmdParamFraction = [\n\t\t\"expand\",\n\t\t\"grace\",\n\t\t\"trim\"\n\t];\n\tvar midiCmdParam1StringVariableIntegers = [\n\t\t\"drum\",\n\t\t\"chordname\"\n\t];\n\n\tvar parseMidiCommand = function(midi, tune, restOfString) {\n\t\tvar midi_cmd = midi.shift().token;\n\t\tvar midi_params = [];\n\t\tif (midiCmdParam0.indexOf(midi_cmd) >= 0) {\n\t\t\t// NO PARAMETERS\n\t\t\tif (midi.length !== 0)\n\t\t\t\twarn(\"Unexpected parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t} else if (midiCmdParam1String.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE STRING PARAMETER\n\t\t\tif (midi.length !== 1)\n\t\t\t\twarn(\"Expected one parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse\n\t\t\t\tmidi_params.push(midi[0].token);\n\t\t} else if (midiCmdParam1Integer.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE INT PARAMETER\n\t\t\tif (midi.length !== 1)\n\t\t\t\twarn(\"Expected one parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\")\n\t\t\t\twarn(\"Expected one integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t} else if (midiCmdParam1Integer1OptionalInteger.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE INT PARAMETER, ONE OPTIONAL PARAMETER\n\t\t\tif (midi.length !== 1 && midi.length !== 2)\n\t\t\t\twarn(\"Expected one or two parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\")\n\t\t\t\twarn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi.length === 2 && midi[1].type !== \"number\")\n\t\t\t\twarn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tif (midi.length === 2)\n\t\t\t\t\tmidi_params.push(midi[1].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam2Integer.indexOf(midi_cmd) >= 0) {\n\t\t\t// TWO INT PARAMETERS\n\t\t\tif (midi.length !== 2)\n\t\t\t\twarn(\"Expected two parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\" || midi[1].type !== \"number\")\n\t\t\t\twarn(\"Expected two integer parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tmidi_params.push(midi[1].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam1String1Integer.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE STRING PARAMETER, ONE INT PARAMETER\n\t\t\tif (midi.length !== 2)\n\t\t\t\twarn(\"Expected two parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"alpha\" || midi[1].type !== \"number\")\n\t\t\t\twarn(\"Expected one string and one integer parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].token);\n\t\t\t\tmidi_params.push(midi[1].intt);\n\t\t\t}\n\t\t} else if (midi_cmd === 'drummap') {\n\t\t\t// BUILD AN OBJECT OF ABC NOTE => MIDI NOTE\n\t\t\tif (midi.length === 2 && midi[0].type === 'alpha' && midi[1].type === 'number') {\n\t\t\t\tif (!tune.formatting) tune.formatting = {};\n\t\t\t\tif (!tune.formatting.midi) tune.formatting.midi = {};\n\t\t\t\tif (!tune.formatting.midi.drummap) tune.formatting.midi.drummap = {};\n\t\t\t\ttune.formatting.midi.drummap[midi[0].token] = midi[1].intt;\n\t\t\t\tmidi_params = tune.formatting.midi.drummap;\n\t\t\t} else if (midi.length === 3 && midi[0].type === 'punct' && midi[1].type === 'alpha' && midi[2].type === 'number') {\n\t\t\t\tif (!tune.formatting) tune.formatting = {};\n\t\t\t\tif (!tune.formatting.midi) tune.formatting.midi = {};\n\t\t\t\tif (!tune.formatting.midi.drummap) tune.formatting.midi.drummap = {};\n\t\t\t\ttune.formatting.midi.drummap[midi[0].token+midi[1].token] = midi[2].intt;\n\t\t\t\tmidi_params = tune.formatting.midi.drummap;\n\t\t\t} else {\n\t\t\t\twarn(\"Expected one note name and one integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\t}\n\t\t} else if (midiCmdParamFraction.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE FRACTION PARAMETER\n\t\t\tif (midi.length !== 3)\n\t\t\t\twarn(\"Expected fraction parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\" || midi[1].token !== \"/\" || midi[2].type !== \"number\")\n\t\t\t\twarn(\"Expected fraction parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tmidi_params.push(midi[2].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam4Integer.indexOf(midi_cmd) >= 0) {\n\t\t\t// FOUR INT PARAMETERS\n\t\t\tif (midi.length !== 4)\n\t\t\t\twarn(\"Expected four parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\" || midi[1].type !== \"number\" || midi[2].type !== \"number\" || midi[3].type !== \"number\")\n\t\t\t\twarn(\"Expected four integer parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tmidi_params.push(midi[1].intt);\n\t\t\t\tmidi_params.push(midi[2].intt);\n\t\t\t\tmidi_params.push(midi[3].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam5Integer.indexOf(midi_cmd) >= 0) {\n\t\t\t// FIVE INT PARAMETERS\n\t\t\tif (midi.length !== 5)\n\t\t\t\twarn(\"Expected five parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\" || midi[1].type !== \"number\" || midi[2].type !== \"number\" || midi[3].type !== \"number\" || midi[4].type !== \"number\")\n\t\t\t\twarn(\"Expected five integer parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tmidi_params.push(midi[1].intt);\n\t\t\t\tmidi_params.push(midi[2].intt);\n\t\t\t\tmidi_params.push(midi[3].intt);\n\t\t\t\tmidi_params.push(midi[4].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam1Integer1OptionalInteger.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE INT PARAMETER, ONE OPTIONAL OCTAVE PARAMETER\n\t\t\tif (midi.length !== 1 || midi.length !== 4)\n\t\t\t\twarn(\"Expected one or two parameters in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"number\")\n\t\t\t\twarn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi.length === 4) {\n\t\t\t\tif (midi[1].token !== \"octave\")\n\t\t\t\t\twarn(\"Expected octave parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\t\tif (midi[2].token !== \"=\")\n\t\t\t\t\twarn(\"Expected octave parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\t\tif (midi[3].type !== \"number\")\n\t\t\t\t\twarn(\"Expected integer parameter for octave in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\t} else {\n\t\t\t\tmidi_params.push(midi[0].intt);\n\t\t\t\tif (midi.length === 4)\n\t\t\t\t\tmidi_params.push(midi[3].intt);\n\t\t\t}\n\t\t} else if (midiCmdParam1StringVariableIntegers.indexOf(midi_cmd) >= 0) {\n\t\t\t// ONE STRING, VARIABLE INT PARAMETERS\n\t\t\tif (midi.length < 2)\n\t\t\t\twarn(\"Expected string parameter and at least one integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse if (midi[0].type !== \"alpha\")\n\t\t\t\twarn(\"Expected string parameter and at least one integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\telse {\n\t\t\t\tvar p = midi.shift();\n\t\t\t\tmidi_params.push(p.token);\n\t\t\t\twhile (midi.length > 0) {\n\t\t\t\t\tp = midi.shift();\n\t\t\t\t\tif (p.type !== \"number\")\n\t\t\t\t\t\twarn(\"Expected integer parameter in MIDI \" + midi_cmd, restOfString, 0);\n\t\t\t\t\tmidi_params.push(p.intt);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (tune.hasBeginMusic())\n\t\t\ttune.appendElement('midi', -1, -1, { cmd: midi_cmd, params: midi_params });\n\t\telse {\n\t\t\tif (tune.formatting['midi'] === undefined)\n\t\t\t\ttune.formatting['midi'] = {};\n\t\t\ttune.formatting['midi'][midi_cmd] = midi_params;\n\t\t}\n\t};\n\n\tparseDirective.parseFontChangeLine = function(textstr) {\n\t\tvar textParts = textstr.split('$');\n\t\tif (textParts.length > 1 && multilineVars.setfont) {\n\t\t\tvar textarr = [ { text: textParts[0] }];\n\t\t\tfor (var i = 1; i < textParts.length; i++) {\n\t\t\t\tif (textParts[i].charAt(0) === '0')\n\t\t\t\t\ttextarr.push({ text: textParts[i].substring(1) });\n\t\t\t\telse if (textParts[i].charAt(0) === '1' && multilineVars.setfont[1])\n\t\t\t\t\ttextarr.push({font: multilineVars.setfont[1], text: textParts[i].substring(1) });\n\t\t\t\telse if (textParts[i].charAt(0) === '2' && multilineVars.setfont[2])\n\t\t\t\t\ttextarr.push({font: multilineVars.setfont[2], text: textParts[i].substring(1) });\n\t\t\t\telse if (textParts[i].charAt(0) === '3' && multilineVars.setfont[3])\n\t\t\t\t\ttextarr.push({font: multilineVars.setfont[3], text: textParts[i].substring(1) });\n\t\t\t\telse if (textParts[i].charAt(0) === '4' && multilineVars.setfont[4])\n\t\t\t\t\ttextarr.push({font: multilineVars.setfont[4], text: textParts[i].substring(1) });\n\t\t\t\telse\n\t\t\t\t\ttextarr[textarr.length-1].text += '$' + textParts[i];\n\t\t\t}\n\t\t\tif (textarr.length > 1)\n\t\t\t\treturn textarr;\n\t\t}\n\t\treturn textstr;\n\t};\n\n\tvar positionChoices = [ 'auto', 'above', 'below', 'hidden' ];\n\tparseDirective.addDirective = function(str) {\n\t\tvar tokens = tokenizer.tokenize(str, 0, str.length);\t// 3 or more % in a row, or just spaces after %% is just a comment\n\t\tif (tokens.length === 0 || tokens[0].type !== 'alpha') return null;\n\t\tvar restOfString = str.substring(str.indexOf(tokens[0].token)+tokens[0].token.length);\n\t\trestOfString = tokenizer.stripComment(restOfString);\n\t\tvar cmd = tokens.shift().token.toLowerCase();\n\t\tvar scratch = \"\";\n\t\tswitch (cmd)\n\t\t{\n\t\t\t// The following directives were added to abc_parser_lint, but haven't been implemented here.\n\t\t\t// Most of them are direct translations from the directives that will be parsed in. See abcm2ps's format.txt for info on each of these.\n\t\t\t//\t\t\t\t\talignbars: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\taligncomposer: { type: \"string\", Enum: [ 'left', 'center','right' ], optional: true },\n\t\t\t//\t\t\t\t\tbstemdown: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tcontinueall: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tdynalign: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\texprabove: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\texprbelow: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tgchordbox: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tgraceslurs: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tgracespacebefore: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tgracespaceinside: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tgracespaceafter: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tinfospace: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tlineskipfac: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tmaxshrink: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tmaxstaffsep: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tmaxsysstaffsep: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tnotespacingfactor: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tparskipfac: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tslurheight: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tsplittune: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tsquarebreve: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tstemheight: { type: \"number\", optional: true },\n\t\t\t//\t\t\t\t\tstraightflags: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\tstretchstaff: { type: \"boolean\", optional: true },\n\t\t\t//\t\t\t\t\ttitleformat: { type: \"string\", optional: true },\n\t\t\tcase \"bagpipes\":tune.formatting.bagpipes = true;break;\n\t\t\tcase \"flatbeams\":tune.formatting.flatbeams = true;break;\n\t\t\tcase \"landscape\":multilineVars.landscape = true;break;\n\t\t\tcase \"papersize\":multilineVars.papersize = restOfString;break;\n\t\t\tcase \"slurgraces\":tune.formatting.slurgraces = true;break;\n\t\t\tcase \"stretchlast\":tune.formatting.stretchlast = true;break;\n\t\t\tcase \"titlecaps\":multilineVars.titlecaps = true;break;\n\t\t\tcase \"titleleft\":tune.formatting.titleleft = true;break;\n\t\t\tcase \"measurebox\":tune.formatting.measurebox = true;break;\n\n\t\t\tcase \"vocal\": return addMultilineVarOneParamChoice(\"vocalPosition\", cmd, tokens, positionChoices);\n\t\t\tcase \"dynamic\": return addMultilineVarOneParamChoice(\"dynamicPosition\", cmd, tokens, positionChoices);\n\t\t\tcase \"gchord\": return addMultilineVarOneParamChoice(\"chordPosition\", cmd, tokens, positionChoices);\n\t\t\tcase \"ornament\": return addMultilineVarOneParamChoice(\"ornamentPosition\", cmd, tokens, positionChoices);\n\t\t\tcase \"volume\": return addMultilineVarOneParamChoice(\"volumePosition\", cmd, tokens, positionChoices);\n\n\t\t\tcase \"botmargin\":\n\t\t\tcase \"botspace\":\n\t\t\tcase \"composerspace\":\n\t\t\tcase \"indent\":\n\t\t\tcase \"leftmargin\":\n\t\t\tcase \"linesep\":\n\t\t\tcase \"musicspace\":\n\t\t\tcase \"partsspace\":\n\t\t\tcase \"pageheight\":\n\t\t\tcase \"pagewidth\":\n\t\t\tcase \"rightmargin\":\n\t\t\tcase \"staffsep\":\n\t\t\tcase \"staffwidth\":\n\t\t\tcase \"subtitlespace\":\n\t\t\tcase \"sysstaffsep\":\n\t\t\tcase \"systemsep\":\n\t\t\tcase \"textspace\":\n\t\t\tcase \"titlespace\":\n\t\t\tcase \"topmargin\":\n\t\t\tcase \"topspace\":\n\t\t\tcase \"vocalspace\":\n\t\t\tcase \"wordsspace\":\n\t\t\t\treturn oneParameterMeasurement(cmd, tokens);\n\t\t\tcase \"voicescale\":\n\t\t\t\tif (tokens.length !== 1 || tokens[0].type !== 'number')\n\t\t\t\t\treturn \"voicescale requires one float as a parameter\";\n\t\t\t\tvar voiceScale = tokens.shift();\n\t\t\t\tif (multilineVars.currentVoice) {\n\t\t\t\t\tmultilineVars.currentVoice.scale = voiceScale.floatt;\n\t\t\t\t\ttune.changeVoiceScale(multilineVars.currentVoice.scale);\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\tcase \"vskip\":\n\t\t\t\tvar vskip = getRequiredMeasurement(cmd, tokens);\n\t\t\t\tif (vskip.error)\n\t\t\t\t\treturn vskip.error;\n\t\t\t\ttune.addSpacing(vskip);\n\t\t\t\treturn null;\n\t\t\tcase \"scale\":\n\t\t\t\tsetScale(cmd, tokens);\n\t\t\t\tbreak;\n\t\t\tcase \"sep\":\n\t\t\t\tif (tokens.length === 0)\n\t\t\t\t\ttune.addSeparator();\n\t\t\t\telse {\n\t\t\t\t\tvar points = tokenizer.getMeasurement(tokens);\n\t\t\t\t\tif (points.used === 0)\n\t\t\t\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n\t\t\t\t\tvar spaceAbove = points.value;\n\n\t\t\t\t\tpoints = tokenizer.getMeasurement(tokens);\n\t\t\t\t\tif (points.used === 0)\n\t\t\t\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n\t\t\t\t\tvar spaceBelow = points.value;\n\n\t\t\t\t\tpoints = tokenizer.getMeasurement(tokens);\n\t\t\t\t\tif (points.used === 0 || tokens.length !== 0)\n\t\t\t\t\t\treturn \"Directive \\\"\" + cmd + \"\\\" requires 3 numbers: space above, space below, length of line\";\n\t\t\t\t\tvar lenLine = points.value;\n\t\t\t\t\ttune.addSeparator(spaceAbove, spaceBelow, lenLine);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"barsperstaff\":\n\t\t\t\tscratch = addMultilineVar('barsperstaff', cmd, tokens);\n\t\t\t\tif (scratch !== null) return scratch;\n\t\t\t\tbreak;\n\t\t\tcase \"staffnonote\":\n\t\t\t\t// The sense of the boolean is opposite here. \"0\" means true.\n\t\t\t\tif (tokens.length !== 1)\n\t\t\t\t\treturn \"Directive staffnonote requires one parameter: 0 or 1\";\n\t\t\t\tif (tokens[0].token === '0')\n\t\t\t\t\tmultilineVars.staffnonote = true;\n\t\t\t\telse if (tokens[0].token === '1')\n\t\t\t\t\tmultilineVars.staffnonote = false;\n\t\t\t\telse\n\t\t\t\t\treturn \"Directive staffnonote requires one parameter: 0 or 1 (received \" + tokens[0].token + ')';\n\t\t\t\tbreak;\n\t\t\tcase \"printtempo\":\n\t\t\t\tscratch = addMultilineVarBool('printTempo', cmd, tokens);\n\t\t\t\tif (scratch !== null) return scratch;\n\t\t\t\tbreak;\n\t\t\tcase \"partsbox\":\n\t\t\t\tscratch = addMultilineVarBool('partsBox', cmd, tokens);\n\t\t\t\tif (scratch !== null) return scratch;\n\t\t\t\tmultilineVars.partsfont.box = multilineVars.partsBox;\n\t\t\t\tbreak;\n\t\t\tcase \"freegchord\":\n\t\t\t\tscratch = addMultilineVarBool('freegchord', cmd, tokens);\n\t\t\t\tif (scratch !== null) return scratch;\n\t\t\t\tbreak;\n\t\t\tcase \"measurenb\":\n\t\t\tcase \"barnumbers\":\n\t\t\t\tscratch = addMultilineVar('barNumbers', cmd, tokens);\n\t\t\t\tif (scratch !== null) return scratch;\n\t\t\t\tbreak;\n\t\t\tcase \"setbarnb\":\n\t\t\t\tif (tokens.length !== 1 || tokens[0].type !== 'number') {\n\t\t\t\t\treturn 'Directive setbarnb requires a number as a parameter.';\n\t\t\t\t}\n\t\t\t\tmultilineVars.currBarNumber = tune.setBarNumberImmediate(tokens[0].intt);\n\t\t\t\tbreak;\n\t\t\tcase \"begintext\":\n\t\t\t\tmultilineVars.inTextBlock = true;\n\t\t\t\tbreak;\n\t\t\tcase \"continueall\":\n\t\t\t\tmultilineVars.continueall = true;\n\t\t\t\tbreak;\n\t\t\tcase \"beginps\":\n\t\t\t\tmultilineVars.inPsBlock = true;\n\t\t\t\twarn(\"Postscript ignored\", str, 0);\n\t\t\t\tbreak;\n\t\t\tcase \"deco\":\n\t\t\t\tif (restOfString.length > 0)\n\t\t\t\t\tmultilineVars.ignoredDecorations.push(restOfString.substring(0, restOfString.indexOf(' ')));\n\t\t\t\twarn(\"Decoration redefinition ignored\", str, 0);\n\t\t\t\tbreak;\n\t\t\tcase \"text\":\n\t\t\t\tvar textstr = tokenizer.translateString(restOfString);\n\t\t\t\ttune.addText(parseDirective.parseFontChangeLine(textstr));\n\t\t\t\tbreak;\n\t\t\tcase \"center\":\n\t\t\t\tvar centerstr = tokenizer.translateString(restOfString);\n\t\t\t\ttune.addCentered(parseDirective.parseFontChangeLine(centerstr));\n\t\t\t\tbreak;\n\t\t\tcase \"font\":\n\t\t\t\t// don't need to do anything for this; it is a useless directive\n\t\t\t\tbreak;\n\t\t\tcase \"setfont\":\n\t\t\t\tvar sfTokens = tokenizer.tokenize(restOfString, 0, restOfString.length);\n//\t\t\t\tvar sfDone = false;\n\t\t\t\tif (sfTokens.length >= 4) {\n\t\t\t\t\tif (sfTokens[0].token === '-' && sfTokens[1].type === 'number') {\n\t\t\t\t\t\tvar sfNum = parseInt(sfTokens[1].token);\n\t\t\t\t\t\tif (sfNum >= 1 && sfNum <= 4) {\n\t\t\t\t\t\t\tif (!multilineVars.setfont)\n\t\t\t\t\t\t\t\tmultilineVars.setfont = [];\n\t\t\t\t\t\t\tsfTokens.shift();\n\t\t\t\t\t\t\tsfTokens.shift();\n\t\t\t\t\t\t\tmultilineVars.setfont[sfNum] = getFontParameter(sfTokens, multilineVars.setfont[sfNum], str, 0, 'setfont');\n//\t\t\t\t\t\t\tvar sfSize = sfTokens.pop();\n//\t\t\t\t\t\t\tif (sfSize.type === 'number') {\n//\t\t\t\t\t\t\t\tsfSize = parseInt(sfSize.token);\n//\t\t\t\t\t\t\t\tvar sfFontName = '';\n//\t\t\t\t\t\t\t\tfor (var sfi = 2; sfi < sfTokens.length; sfi++)\n//\t\t\t\t\t\t\t\t\tsfFontName += sfTokens[sfi].token;\n//\t\t\t\t\t\t\t\tmultilineVars.setfont[sfNum] = { face: sfFontName, size: sfSize };\n//\t\t\t\t\t\t\t\tsfDone = true;\n//\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n//\t\t\t\tif (!sfDone)\n//\t\t\t\t\treturn \"Bad parameters: \" + cmd;\n\t\t\t\tbreak;\n\t\t\tcase \"gchordfont\":\n\t\t\tcase \"partsfont\":\n\t\t\tcase \"tripletfont\":\n\t\t\tcase \"vocalfont\":\n\t\t\tcase \"textfont\":\n\t\t\tcase \"annotationfont\":\n\t\t\tcase \"historyfont\":\n\t\t\tcase \"infofont\":\n\t\t\tcase \"measurefont\":\n\t\t\tcase \"repeatfont\":\n\t\t\tcase \"wordsfont\":\n\t\t\t\treturn getChangingFont(cmd, tokens, str);\n\t\t\tcase \"composerfont\":\n\t\t\tcase \"subtitlefont\":\n\t\t\tcase \"tempofont\":\n\t\t\tcase \"titlefont\":\n\t\t\tcase \"voicefont\":\n\t\t\tcase \"footerfont\":\n\t\t\tcase \"headerfont\":\n\t\t\t\treturn getGlobalFont(cmd, tokens, str);\n\t\t\tcase \"barlabelfont\":\n\t\t\tcase \"barnumberfont\":\n\t\t\tcase \"barnumfont\":\n\t\t\t\treturn getChangingFont(\"measurefont\", tokens, str);\n\t\t\tcase \"staves\":\n\t\t\tcase \"score\":\n\t\t\t\tmultilineVars.score_is_present = true;\n\t\t\t\tvar addVoice = function(id, newStaff, bracket, brace, continueBar) {\n\t\t\t\t\tif (newStaff || multilineVars.staves.length === 0) {\n\t\t\t\t\t\tmultilineVars.staves.push({index: multilineVars.staves.length, numVoices: 0});\n\t\t\t\t\t}\n\t\t\t\t\tvar staff = parseCommon.last(multilineVars.staves);\n\t\t\t\t\tif (bracket !== undefined) staff.bracket = bracket;\n\t\t\t\t\tif (brace !== undefined) staff.brace = brace;\n\t\t\t\t\tif (continueBar) staff.connectBarLines = 'end';\n\t\t\t\t\tif (multilineVars.voices[id] === undefined) {\n\t\t\t\t\t\tmultilineVars.voices[id] = {staffNum: staff.index, index: staff.numVoices};\n\t\t\t\t\t\tstaff.numVoices++;\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tvar openParen = false;\n\t\t\t\tvar openBracket = false;\n\t\t\t\tvar openBrace = false;\n\t\t\t\tvar justOpenParen = false;\n\t\t\t\tvar justOpenBracket = false;\n\t\t\t\tvar justOpenBrace = false;\n\t\t\t\tvar continueBar = false;\n\t\t\t\tvar lastVoice;\n\t\t\t\tvar addContinueBar = function() {\n\t\t\t\t\tcontinueBar = true;\n\t\t\t\t\tif (lastVoice) {\n\t\t\t\t\t\tvar ty = 'start';\n\t\t\t\t\t\tif (lastVoice.staffNum > 0) {\n\t\t\t\t\t\t\tif (multilineVars.staves[lastVoice.staffNum-1].connectBarLines === 'start' ||\n\t\t\t\t\t\t\t\tmultilineVars.staves[lastVoice.staffNum-1].connectBarLines === 'continue')\n\t\t\t\t\t\t\t\tty = 'continue';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmultilineVars.staves[lastVoice.staffNum].connectBarLines = ty;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\twhile (tokens.length) {\n\t\t\t\t\tvar t = tokens.shift();\n\t\t\t\t\tswitch (t.token) {\n\t\t\t\t\t\tcase '(':\n\t\t\t\t\t\t\tif (openParen) warn(\"Can't nest parenthesis in %%score\", str, t.start);\n\t\t\t\t\t\t\telse {openParen = true;justOpenParen = true;}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ')':\n\t\t\t\t\t\t\tif (!openParen || justOpenParen) warn(\"Unexpected close parenthesis in %%score\", str, t.start);\n\t\t\t\t\t\t\telse openParen = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '[':\n\t\t\t\t\t\t\tif (openBracket) warn(\"Can't nest brackets in %%score\", str, t.start);\n\t\t\t\t\t\t\telse {openBracket = true;justOpenBracket = true;}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase ']':\n\t\t\t\t\t\t\tif (!openBracket || justOpenBracket) warn(\"Unexpected close bracket in %%score\", str, t.start);\n\t\t\t\t\t\t\telse {openBracket = false;multilineVars.staves[lastVoice.staffNum].bracket = 'end';}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '{':\n\t\t\t\t\t\t\tif (openBrace ) warn(\"Can't nest braces in %%score\", str, t.start);\n\t\t\t\t\t\t\telse {openBrace = true;justOpenBrace = true;}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '}':\n\t\t\t\t\t\t\tif (!openBrace || justOpenBrace) warn(\"Unexpected close brace in %%score\", str, t.start);\n\t\t\t\t\t\t\telse {openBrace = false;multilineVars.staves[lastVoice.staffNum].brace = 'end';}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase '|':\n\t\t\t\t\t\t\taddContinueBar();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tvar vc = \"\";\n\t\t\t\t\t\t\twhile (t.type === 'alpha' || t.type === 'number') {\n\t\t\t\t\t\t\t\tvc += t.token;\n\t\t\t\t\t\t\t\tif (t.continueId)\n\t\t\t\t\t\t\t\t\tt = tokens.shift();\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar newStaff = !openParen || justOpenParen;\n\t\t\t\t\t\t\tvar bracket = justOpenBracket ? 'start' : openBracket ? 'continue' : undefined;\n\t\t\t\t\t\t\tvar brace = justOpenBrace ? 'start' : openBrace ? 'continue' : undefined;\n\t\t\t\t\t\t\taddVoice(vc, newStaff, bracket, brace, continueBar);\n\t\t\t\t\t\t\tjustOpenParen = false;\n\t\t\t\t\t\t\tjustOpenBracket = false;\n\t\t\t\t\t\t\tjustOpenBrace = false;\n\t\t\t\t\t\t\tcontinueBar = false;\n\t\t\t\t\t\t\tlastVoice = multilineVars.voices[vc];\n\t\t\t\t\t\t\tif (cmd === 'staves')\n\t\t\t\t\t\t\t\taddContinueBar();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"newpage\":\n\t\t\t\tvar pgNum = tokenizer.getInt(restOfString);\n\t\t\t\ttune.addNewPage(pgNum.digits === 0 ? -1 : pgNum.value);\n\t\t\t\tbreak;\n\n\t\t\tcase \"abc\":\n\t\t\t\tvar arr = restOfString.split(' ');\n\t\t\t\tswitch (arr[0]) {\n\t\t\t\t\tcase \"-copyright\":\n\t\t\t\t\tcase \"-creator\":\n\t\t\t\t\tcase \"-edited-by\":\n\t\t\t\t\tcase \"-version\":\n\t\t\t\t\tcase \"-charset\":\n\t\t\t\t\t\tvar subCmd = arr.shift();\n\t\t\t\t\t\ttune.addMetaText(cmd+subCmd, arr.join(' '));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn \"Unknown directive: \" + cmd+arr[0];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"header\":\n\t\t\tcase \"footer\":\n\t\t\t\tvar footerStr = tokenizer.getMeat(restOfString, 0, restOfString.length);\n\t\t\t\tfooterStr = restOfString.substring(footerStr.start, footerStr.end);\n\t\t\t\tif (footerStr.charAt(0) === '\"' && footerStr.charAt(footerStr.length-1) === '\"' )\n\t\t\t\t\tfooterStr = footerStr.substring(1, footerStr.length-1);\n\t\t\t\tvar footerArr = footerStr.split('\\t');\n\t\t\t\tvar footer = {};\n\t\t\t\tif (footerArr.length === 1)\n\t\t\t\t\tfooter = { left: \"\", center: footerArr[0], right: \"\" };\n\t\t\t\telse if (footerArr.length === 2)\n\t\t\t\t\tfooter = { left: footerArr[0], center: footerArr[1], right: \"\" };\n\t\t\t\telse\n\t\t\t\t\tfooter = { left: footerArr[0], center: footerArr[1], right: footerArr[2] };\n\t\t\t\tif (footerArr.length > 3)\n\t\t\t\t\twarn(\"Too many tabs in \" + cmd + \": \" + footerArr.length + \" found.\", restOfString, 0);\n\n\t\t\t\ttune.addMetaTextObj(cmd, footer);\n\t\t\t\tbreak;\n\n\t\t\tcase \"midi\":\n\t\t\t\tvar midi = tokenizer.tokenize(restOfString, 0, restOfString.length, true);\n\t\t\t\tif (midi.length > 0 && midi[0].token === '=')\n\t\t\t\t\tmidi.shift();\n\t\t\t\tif (midi.length === 0)\n\t\t\t\t\twarn(\"Expected midi command\", restOfString, 0);\n\t\t\t\telse\n\t\t\t\t\tparseMidiCommand(midi, tune, restOfString);\n\t\t\t\tbreak;\n\n\t\t\tcase \"map\":\n\t\t\tcase \"percmap\":\n\t\t\tcase \"playtempo\":\n\t\t\tcase \"auquality\":\n\t\t\tcase \"continuous\":\n\t\t\tcase \"nobarcheck\":\n\t\t\t\t// TODO-PER: Actually handle the parameters of these\n\t\t\t\ttune.formatting[cmd] = restOfString;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn \"Unknown directive: \" + cmd;\n\t\t}\n\t\treturn null;\n\t};\n\tparseDirective.globalFormatting = function(formatHash) {\n\t\tfor (var cmd in formatHash) {\n\t\t\tif (formatHash.hasOwnProperty(cmd)) {\n\t\t\t\tvar value = ''+formatHash[cmd];\n\t\t\t\tvar tokens = tokenizer.tokenize(value, 0, value.length);\n\t\t\t\tvar scratch;\n\t\t\t\tswitch (cmd) {\n\t\t\t\t\tcase \"titlefont\":\n\t\t\t\t\tcase \"gchordfont\":\n\t\t\t\t\tcase \"composerfont\":\n\t\t\t\t\tcase \"footerfont\":\n\t\t\t\t\tcase \"headerfont\":\n\t\t\t\t\tcase \"historyfont\":\n\t\t\t\t\tcase \"infofont\":\n\t\t\t\t\tcase \"measurefont\":\n\t\t\t\t\tcase \"partsfont\":\n\t\t\t\t\tcase \"repeatfont\":\n\t\t\t\t\tcase \"subtitlefont\":\n\t\t\t\t\tcase \"tempofont\":\n\t\t\t\t\tcase \"textfont\":\n\t\t\t\t\tcase \"voicefont\":\n\t\t\t\t\tcase \"tripletfont\":\n\t\t\t\t\tcase \"vocalfont\":\n\t\t\t\t\tcase \"wordsfont\":\n\t\t\t\t\tcase \"annotationfont\":\n\t\t\t\t\t\tgetChangingFont(cmd, tokens, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"scale\":\n\t\t\t\t\t\tsetScale(cmd, tokens);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"partsbox\":\n\t\t\t\t\t\tscratch = addMultilineVarBool('partsBox', cmd, tokens);\n\t\t\t\t\t\tif (scratch !== null) warn(scratch);\n\t\t\t\t\t\tmultilineVars.partsfont.box = multilineVars.partsBox;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"freegchord\":\n\t\t\t\t\t\tscratch = addMultilineVarBool('freegchord', cmd, tokens);\n\t\t\t\t\t\tif (scratch !== null) warn(scratch);\n\t\t\t\t\tdefault:\n\t\t\t\t\t\twarn(\"Formatting directive unrecognized: \", cmd, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n})();\n\nmodule.exports = parseDirective;\n"]},"metadata":{},"sourceType":"script"}