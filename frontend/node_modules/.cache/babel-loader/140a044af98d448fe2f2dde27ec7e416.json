{"ast":null,"code":"var _jsxFileName = \"/home/elad/Desktop/Repos/drums-trainer/frontend/src/pages/recognizer/upload/Upload.js\",\n    _s = $RefreshSig$();\n\n// import React, {Component} from 'react';\nimport { Col, Row } from \"reactstrap\";\nimport Widget from \"../../../components/Widget/Widget\"; // import Dropzone from \"react-dropzone\";\n// import \"./upload.module.scss\";\n// import UploadService from \"./services/upload-files.service\";\n// class UploadFiles extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.upload = this.upload.bind(this);\n//     this.onDrop = this.onDrop.bind(this);\n//     this.state = {\n//       selectedFiles: undefined,\n//       currentFile: undefined,\n//       progress: 0,\n//       message: \"\",\n//       fileInfos: [],\n//     };\n//   }\n//   componentDidMount() {\n//     UploadService.getFiles().then((response) => {\n//       this.setState({\n//         fileInfos: response.data,\n//       });\n//     });\n//   }\n//   upload() {\n//     let currentFile = this.state.selectedFiles[0];\n//     this.setState({\n//       progress: 0,\n//       currentFile: currentFile,\n//     });\n//     UploadService.upload(currentFile, (event) => {\n//       this.setState({\n//         progress: Math.round((100 * event.loaded) / event.total),\n//       });\n//     })\n//       .then((response) => {\n//         this.setState({\n//           message: response.data.message,\n//         });\n//         return UploadService.getFiles();\n//       })\n//       .then((files) => {\n//         this.setState({\n//           fileInfos: files.data,\n//         });\n//       })\n//       .catch(() => {\n//         this.setState({\n//           progress: 0,\n//           message: \"Could not upload the file!\",\n//           currentFile: undefined,\n//         });\n//       });\n//     this.setState({\n//       selectedFiles: undefined,\n//     });\n//   }\n//   onDrop(files) {\n//     if (files.length > 0) {\n//       this.setState({ selectedFiles: files });\n//     }\n//   }\n//   render() {\n//     const { selectedFiles, currentFile, progress, message, fileInfos } = this.state;\n//     return (\n//       <div>\n//         {currentFile && (\n//           <div className=\"progress mb-3\">\n//             <div\n//               className=\"progress-bar progress-bar-info progress-bar-striped\"\n//               role=\"progressbar\"\n//               aria-valuenow={progress}\n//               aria-valuemin=\"0\"\n//               aria-valuemax=\"100\"\n//               style={{ width: progress + \"%\" }}\n//             >\n//               {progress}%\n//             </div>\n//           </div>\n//         )}\n//         <Dropzone onDrop={this.onDrop} multiple={false}>\n//           {({ getRootProps, getInputProps }) => (\n//             <section>\n//               <div {...getRootProps({ className: \"dropzone\" })}>\n//                 <input {...getInputProps()} />\n//                 {selectedFiles && selectedFiles[0].name ? (\n//                   <div className=\"selected-file\">\n//                     {selectedFiles && selectedFiles[0].name}\n//                   </div>\n//                 ) : (\n//                   \"Drag and drop file here, or click to select file\"\n//                 )}\n//               </div>\n//               <aside className=\"selected-file-wrapper\">\n//                 <button\n//                   className=\"btn btn-success\"\n//                   disabled={!selectedFiles}\n//                   onClick={this.upload}\n//                 >\n//                   Upload\n//                 </button>\n//               </aside>\n//             </section>\n//           )}\n//         </Dropzone>\n//         <div className=\"alert alert-light\" role=\"alert\">\n//           {message}\n//         </div>\n//         {fileInfos.length > 0 && (\n//           <div className=\"card\">\n//             <div className=\"card-header\">List of Files</div>\n//             <ul className=\"list-group list-group-flush\">\n//               {fileInfos.map((file, index) => (\n//                 <li className=\"list-group-item\" key={index}>\n//                   <a href={file.url}>{file.name}</a>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\nimport React, { useMemo } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\nconst focusedStyle = {\n  borderColor: '#2196f3'\n};\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction StyledDropzone(props) {\n  _s();\n\n  const {\n    getRootProps,\n    getInputProps,\n    isFocused,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: {\n      'image/*': []\n    }\n  });\n  const style = useMemo(() => ({ ...baseStyle,\n    ...(isFocused ? focusedStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [isFocused, isDragAccept, isDragReject]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        style\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Drag Files or Click to Browse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n} // import 'react-dropzone-uploader/dist/styles.css'\n// import Dropzone from 'react-dropzone-uploader'\n// const MyUploader = () => {\n//   // specify upload params and url for your files\n//   const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n//   // called every time a file's `status` changes\n//   const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n//   // receives array of files that are done uploading when submit button is clicked\n//   const handleSubmit = (files) => { console.log(files.map(f => f.meta)) }\n//   return (\n//     <Dropzone\n//       getUploadParams={getUploadParams}\n//       onChangeStatus={handleChangeStatus}\n//       onSubmit={handleSubmit}\n//       // accept=\"image/*,audio/*,video/*\"\n//     />\n//   )\n// }\n\n\n_s(StyledDropzone, \"dok2V14to7CdW5vj0nQjiaONuCU=\", false, function () {\n  return [useDropzone];\n});\n\n_c = StyledDropzone;\n\nconst Upload = () => {\n  return /*#__PURE__*/_jsxDEV(Row, {\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      className: \"pr-grid-col\",\n      xs: 12,\n      lg: 12,\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        className: \"gutter mb-4\",\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(Widget, {\n            className: \"widget-p-md\",\n            children: /*#__PURE__*/_jsxDEV(StyledDropzone, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Upload;\nexport default Upload;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledDropzone\");\n$RefreshReg$(_c2, \"Upload\");","map":{"version":3,"sources":["/home/elad/Desktop/Repos/drums-trainer/frontend/src/pages/recognizer/upload/Upload.js"],"names":["Col","Row","Widget","React","useMemo","useDropzone","baseStyle","flex","display","flexDirection","alignItems","padding","borderWidth","borderRadius","borderColor","borderStyle","backgroundColor","color","outline","transition","focusedStyle","acceptStyle","rejectStyle","StyledDropzone","props","getRootProps","getInputProps","isFocused","isDragAccept","isDragReject","accept","style","Upload"],"mappings":";;;AAAA;AAEA,SACEA,GADF,EAEEC,GAFF,QAGO,YAHP;AAIA,OAAOC,MAAP,MAAmB,mCAAneC,OAAf,QAA6B,OAA7B;AACA,SAAQC,WAAR,QAA0B,gBAA1B;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE,CADU;AAEhBC,EAAAA,OAAO,EAAE,MAFO;AAGhBC,EAAAA,aAAa,EAAE,QAHC;AAIhBC,EAAAA,UAAU,EAAE,QAJI;AAKhBC,EAAAA,OAAO,EAAE,MALO;AAMhBC,EAAAA,WAAW,EAAE,CANG;AAOhBC,EAAAA,YAAY,EAAE,CAPE;AAQhBC,EAAAA,WAAW,EAAE,SARG;AAShBC,EAAAA,WAAW,EAAE,QATG;AAUhBC,EAAAA,eAAe,EAAE,SAVD;AAWhBC,EAAAA,KAAK,EAAE,SAXS;AAYhBC,EAAAA,OAAO,EAAE,MAZO;AAahBC,EAAAA,UAAU,EAAE;AAbI,CAAlB;AAgBA,MAAMC,YAAY,GAAG;AACnBN,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,MAAMO,WAAW,GAAG;AAClBP,EAAAA,WAAW,EAAE;AADK,CAApB;AAIA,MAAMQ,WAAW,GAAG;AAClBR,EAAAA,WAAW,EAAE;AADK,CAApB;;AAIA,SAASS,cAAT,CAAwBC,KAAxB,EAA+B;AAAA;;AAC7B,QAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA;AALI,MAMFxB,WAAW,CAAC;AAACyB,IAAAA,MAAM,EAAE;AAAC,iBAAW;AAAZ;AAAT,GAAD,CANf;AAQA,QAAMC,KAAK,GAAG3B,OAAO,CAAC,OAAO,EAC3B,GAAGE,SADwB;AAE3B,QAAIqB,SAAS,GAAGP,YAAH,GAAkB,EAA/B,CAF2B;AAG3B,QAAIQ,YAAY,GAAGP,WAAH,GAAiB,EAAjC,CAH2B;AAI3B,QAAIQ,YAAY,GAAGP,WAAH,GAAiB,EAAjC;AAJ2B,GAAP,CAAD,EAKjB,CACFK,SADE,EAEFC,YAFE,EAGFC,YAHE,CALiB,CAArB;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACE,oBAASJ,YAAY,CAAC;AAACM,QAAAA;AAAD,OAAD,CAArB;AAAA,8BACE,sBAAWL,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CAMD;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAvDSH,c;UAOHlB,W;;;KAPGkB,c;;AA0DT,MAAMS,MAAM,GAAG,MAAM;AACnB,sBAEE,QAAC,GAAD;AAAA,2BACA,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,aAAf;AAA6B,MAAA,EAAE,EAAE,EAAjC;AAAqC,MAAA,EAAE,EAAE,EAAzC;AAAA,6BACE,QAAC,GAAD;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA,+BACE,QAAC,GAAD;AAAA,iCACA,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAC,aAAlB;AAAA,mCACE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAFF;AAcD,CAfD;;MAAMA,M;AAkBN,eAAeA,MAAf","sourcesContent":["// import React, {Component} from 'react';\n\nimport {\n  Col,\n  Row,\n} from \"reactstrap\";\nimport Widget from \"../../../components/Widget/Widget\";\n\n\n// import Dropzone from \"react-dropzone\";\n// import \"./upload.module.scss\";\n\n// import UploadService from \"./services/upload-files.service\";\n\n\n\n// class UploadFiles extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.upload = this.upload.bind(this);\n//     this.onDrop = this.onDrop.bind(this);\n\n//     this.state = {\n//       selectedFiles: undefined,\n//       currentFile: undefined,\n//       progress: 0,\n//       message: \"\",\n//       fileInfos: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     UploadService.getFiles().then((response) => {\n//       this.setState({\n//         fileInfos: response.data,\n//       });\n//     });\n//   }\n\n//   upload() {\n//     let currentFile = this.state.selectedFiles[0];\n\n//     this.setState({\n//       progress: 0,\n//       currentFile: currentFile,\n//     });\n\n//     UploadService.upload(currentFile, (event) => {\n//       this.setState({\n//         progress: Math.round((100 * event.loaded) / event.total),\n//       });\n//     })\n//       .then((response) => {\n//         this.setState({\n//           message: response.data.message,\n//         });\n//         return UploadService.getFiles();\n//       })\n//       .then((files) => {\n//         this.setState({\n//           fileInfos: files.data,\n//         });\n//       })\n//       .catch(() => {\n//         this.setState({\n//           progress: 0,\n//           message: \"Could not upload the file!\",\n//           currentFile: undefined,\n//         });\n//       });\n\n//     this.setState({\n//       selectedFiles: undefined,\n//     });\n//   }\n\n//   onDrop(files) {\n//     if (files.length > 0) {\n//       this.setState({ selectedFiles: files });\n//     }\n//   }\n\n//   render() {\n//     const { selectedFiles, currentFile, progress, message, fileInfos } = this.state;\n\n//     return (\n//       <div>\n//         {currentFile && (\n//           <div className=\"progress mb-3\">\n//             <div\n//               className=\"progress-bar progress-bar-info progress-bar-striped\"\n//               role=\"progressbar\"\n//               aria-valuenow={progress}\n//               aria-valuemin=\"0\"\n//               aria-valuemax=\"100\"\n//               style={{ width: progress + \"%\" }}\n//             >\n//               {progress}%\n//             </div>\n//           </div>\n//         )}\n\n//         <Dropzone onDrop={this.onDrop} multiple={false}>\n//           {({ getRootProps, getInputProps }) => (\n//             <section>\n//               <div {...getRootProps({ className: \"dropzone\" })}>\n//                 <input {...getInputProps()} />\n//                 {selectedFiles && selectedFiles[0].name ? (\n//                   <div className=\"selected-file\">\n//                     {selectedFiles && selectedFiles[0].name}\n//                   </div>\n//                 ) : (\n//                   \"Drag and drop file here, or click to select file\"\n//                 )}\n//               </div>\n//               <aside className=\"selected-file-wrapper\">\n//                 <button\n//                   className=\"btn btn-success\"\n//                   disabled={!selectedFiles}\n//                   onClick={this.upload}\n//                 >\n//                   Upload\n//                 </button>\n//               </aside>\n//             </section>\n//           )}\n//         </Dropzone>\n\n//         <div className=\"alert alert-light\" role=\"alert\">\n//           {message}\n//         </div>\n\n//         {fileInfos.length > 0 && (\n//           <div className=\"card\">\n//             <div className=\"card-header\">List of Files</div>\n//             <ul className=\"list-group list-group-flush\">\n//               {fileInfos.map((file, index) => (\n//                 <li className=\"list-group-item\" key={index}>\n//                   <a href={file.url}>{file.name}</a>\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\n\n\nimport React, {useMemo} from 'react';\nimport {useDropzone} from 'react-dropzone';\n\nconst baseStyle = {\n  flex: 1,\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  padding: '20px',\n  borderWidth: 2,\n  borderRadius: 2,\n  borderColor: '#eeeeee',\n  borderStyle: 'dashed',\n  backgroundColor: '#fafafa',\n  color: '#bdbdbd',\n  outline: 'none',\n  transition: 'border .24s ease-in-out'\n};\n\nconst focusedStyle = {\n  borderColor: '#2196f3'\n};\n\nconst acceptStyle = {\n  borderColor: '#00e676'\n};\n\nconst rejectStyle = {\n  borderColor: '#ff1744'\n};\n\nfunction StyledDropzone(props) {\n  const {\n    getRootProps,\n    getInputProps,\n    isFocused,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({accept: {'image/*': []}});\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isFocused ? focusedStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isFocused,\n    isDragAccept,\n    isDragReject\n  ]);\n\n  return (\n    <div className=\"container\">\n      <div {...getRootProps({style})}>\n        <input {...getInputProps()} />\n        <p>Drag Files or Click to Browse</p>\n      </div>\n    </div>\n  );\n}\n\n\n\n\n\n// import 'react-dropzone-uploader/dist/styles.css'\n// import Dropzone from 'react-dropzone-uploader'\n\n// const MyUploader = () => {\n//   // specify upload params and url for your files\n//   const getUploadParams = ({ meta }) => { return { url: 'https://httpbin.org/post' } }\n  \n//   // called every time a file's `status` changes\n//   const handleChangeStatus = ({ meta, file }, status) => { console.log(status, meta, file) }\n  \n//   // receives array of files that are done uploading when submit button is clicked\n//   const handleSubmit = (files) => { console.log(files.map(f => f.meta)) }\n\n//   return (\n//     <Dropzone\n//       getUploadParams={getUploadParams}\n//       onChangeStatus={handleChangeStatus}\n//       onSubmit={handleSubmit}\n//       // accept=\"image/*,audio/*,video/*\"\n//     />\n//   )\n// }\n\n\nconst Upload = () => {\n  return (\n\n    <Row>\n    <Col className=\"pr-grid-col\" xs={12} lg={12}>\n      <Row className=\"gutter mb-4\">\n        <Col>\n        <Widget className=\"widget-p-md\">\n          <StyledDropzone/>\n        </Widget>\n        </Col>\n      </Row>\n    </Col>\n    </Row>\n  );\n}\n\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}